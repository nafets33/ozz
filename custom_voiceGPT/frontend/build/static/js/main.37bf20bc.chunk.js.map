{"version":3,"sources":["Dictaphone.jsx","MediaDisplay.jsx","VoiceGPT.jsx","Main.tsx","index.tsx"],"names":["Dictaphone","_ref","commands","myFunc","listenAfterReply","no_response_time","apiInProgress","listenButton","session_listen","initialFinalTranscript","finalTranscript","interimTranscript","resetTranscript","listening","browserSupportsSpeechRecognition","isMicrophoneAvailable","useSpeechRecognition","editableTranscript","setEditableTranscript","useState","show_transcript","setShowTranscript","debouncedTranscript","setDebouncedTranscript","textareaRef","useRef","cursorPosRef","useEffect","prev","trim","processTranscript","api_body","keywordFound","i","length","keywords","j","keyword","RegExp","search","console","log","current","selectionStart","selectionEnd","React","createElement","Fragment","style","display","gap","marginBottom","onClick","backgroundColor","color","border","padding","borderRadius","cursor","fontSize","showTranscript_func","clearTranscript_func","flexDirection","maxHeight","height","overflowY","fontWeight","animation","fontStyle","ref","value","onChange","e","target","width","resize","MediaDisplay","showImage","imageSrc","largeHeight","largeWidth","smallHeight","smallWidth","className","alignItems","justifyContent","toLowerCase","endsWith","maxWidth","objectFit","controls","autoPlay","loop","muted","src","type","alt","g_anwers","CustomVoiceGPT","props","_refresh_ask$color_di","api","kwargs","show_video","input_text","face_recon","api_key","refresh_ask","self_image","api_audio","client_user","force_db_root","before_trigger","agent_actions","setImageSrc","imageSrc_name","setImageSrc_name","message","setMessage","answers","setAnswers","setListenAfterReply","modelsLoaded","setModelsLoaded","captureVideo","setCaptureVideo","textString","setTextString","setApiInProgress","speaking","setSpeakingInProgress","setlistening","show_conversation","setshow_conversation","showTooltip","setShowTooltip","showTooltip_conv","setShowTooltip_conv","setlistenButton","setsession_listen","convo_button","setconvo_button","before_trigger_vars","before_trigger_","faceData","audioRef","UserUsedChatWindow","setUserUsedChatWindow","buttonName","setButtonName","buttonName_listen","setButtonName_listen","setShowImage","selectedActions","setSelectedActions","datatree","setDataTree","datatreeTitle","setDataTreeTitle","datatree_title","selectedNodes","setSelectedNodes","collapsed","setCollapsed","windowWidth","setWindowWidth","updateWindowWidth","window","innerWidth","fetchImageData","async","response","axios","get","imageUrl","responseType","objectUrl","URL","createObjectURL","data","error","stopListening","SpeechRecognition","listenContinuously","startListening","continuous","language","editingDataframe","setEditingDataframe","editedDataframe","setEditedDataframe","ret","command","text","user","dataframe","body","tigger_type","face_data","selected_actions","selected_nodes","post","pause","apiUrlWithFileName","Audio","play","Promise","resolve","onended","location","href","findNodeByKey","tree","key","k","Object","entries","children","found","background_color_chat","color_dict","placeholder","split","firstKey","nodeObj","nodeTitle","field_name","nodeLink","hyperlink","showSidebar","setShowSidebar","sidebarWide","setSidebarWide","marginRight","background","boxShadow","outline","transition","aria-label","margin","alignSelf","borderRight","onSelectionChange","renderNodes","level","arguments","undefined","parentKeys","Array","isArray","map","_ref2","idx","nodePath","join","hasChildren","keys","isCollapsed","isLast","marginLeft","position","whiteSpace","fontFamily","paddingTop","paddingBottom","left","top","zIndex","bottom","[object Object]","toggleCollapse","lineHeight","userSelect","tabIndex","checked","includes","newSelected","filter","handleSelect","rel","textDecoration","overflow","textOverflow","verticalAlign","title","flex","marginTop","slice","node","answer","textAlign","wordBreak","resp","dangerouslySetInnerHTML","__html","event","onKeyDown","borderCollapse","col","row","rowIdx","newDF","r","click_listenButton","role","convo_mode","onMouseEnter","onMouseLeave","transform","pointerEvents","listenSession","flexWrap","minWidth","action","selected","a","withStreamlitConnection","args","Streamlit","setFrameHeight","VoiceGPT","engine","Styletron","ReactDOM","render","StrictMode","StyletronProvider","ThemeProvider","theme","LightTheme","Main","document","getElementById"],"mappings":"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","file":"static/js/main.37bf20bc.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\n\nconst Dictaphone = ({\n  commands,\n  myFunc,\n  listenAfterReply = false,\n  no_response_time = 3,\n  apiInProgress = false,\n  listenButton = false,\n  session_listen = false,\n  initialFinalTranscript = \"\",\n}) => {\n  const {\n    finalTranscript,\n    interimTranscript,\n    resetTranscript,\n    listening,\n    browserSupportsSpeechRecognition,\n    isMicrophoneAvailable,\n  } = useSpeechRecognition();\n\n  const [editableTranscript, setEditableTranscript] = useState(\"\"); // State for editable transcript\n  const [show_transcript, setShowTranscript] = useState(true);\n  const [debouncedTranscript, setDebouncedTranscript] = useState(\"\");\n\n  const showTranscript_func = () => setShowTranscript((prev) => !prev);\n  const clearTranscript_func = () => {\n    resetTranscript();\n    setEditableTranscript(\"\"); // Clear editable transcript\n  };\n  \n  const textareaRef = useRef(null);\n  const cursorPosRef = useRef(null);\n  // Logic to process transcript based on session_listen\n  const processTranscript = () => {\n    if (finalTranscript !== \"\") {\n\n      if (listenButton) {\n        // When session_listen is false and not using listenButton, just append\n        myFunc(finalTranscript, { api_body: {} }, 8);\n        setEditableTranscript((prev) => `${prev} ${finalTranscript}`.trim());\n        resetTranscript();\n        setEditableTranscript(\"\"); // Clear editable transcript state\n        return;\n      }\n\n\n      if (session_listen) {\n        // Check for keywords only when session_listen is true\n        let keywordFound = false;\n        for (let i = 0; i < commands.length; i++) {\n          const { keywords, api_body } = commands[i];\n          for (let j = 0; j < keywords.length; j++) {\n            const keyword = new RegExp(keywords[j], \"i\");\n            const isKeywordFound = finalTranscript.search(keyword) !== -1;\n  \n            if (isKeywordFound && !apiInProgress) {\n              console.log(`Keyword found: ${keywords[j]}`);\n              myFunc(finalTranscript, commands[i], 1);\n              resetTranscript(); // Reset transcript after processing keyword\n              // setEditableTranscript(\"\"); // Clear editable transcript state\n              keywordFound = true;\n              return;\n            }\n          }\n        }\n  \n        if (!keywordFound) {\n          // Append transcript if no keyword is found\n          setEditableTranscript((prev) => `${prev} ${finalTranscript}`.trim());\n          resetTranscript(); // Clear finalTranscript after appending\n        }\n      } else {\n        // When session_listen is false, focus on capturing speech-to-text\n        if (textareaRef.current) {\n          cursorPosRef.current = textareaRef.current.selectionStart;\n        }\n\n        console.log(\"Recording speech-to-text without keyword triggers\");\n        setEditableTranscript((prev) => `${prev} ${finalTranscript}`.trim());\n        resetTranscript(); // Clear finalTranscript after appending\n      }\n    }\n  };\n\n    useEffect(() => {\n    if (initialFinalTranscript) setEditableTranscript((prev) => `${prev} ${initialFinalTranscript}`.trim());\n  }, []);\n  \n  // Use processTranscript in useEffect to handle updates\n  useEffect(() => {\n    processTranscript();\n  }, [finalTranscript]);\n\n  const handleTranscriptChange = (e) => {\n    setEditableTranscript(e.target.value); // Update editable transcript based on user input\n  };\n\n  useEffect(() => {\n    if (textareaRef.current && cursorPosRef.current !== null) {\n      textareaRef.current.selectionStart = cursorPosRef.current;\n      textareaRef.current.selectionEnd = cursorPosRef.current;\n      cursorPosRef.current = null;\n    }\n    }, [editableTranscript]);\n\n\n  if (!browserSupportsSpeechRecognition) {\n    return <span>No browser support</span>;\n  }\n\n  if (!isMicrophoneAvailable) {\n    return <span>Please allow access to the microphone</span>;\n  }\n\n  return (\n    <>\n      <div style={{ display: \"flex\", gap: \"10px\", marginBottom: \"10px\" }}>\n        <button\n          onClick={() => {\n            myFunc(editableTranscript, { api_body: {} }, 5);\n            resetTranscript();\n            setEditableTranscript(\"\");\n            }}\n            style={{\n            backgroundColor: \"rgb(196, 230, 252)\",\n            color: \"black\",\n            border: \"none\",\n            padding: \"5px 10px\",\n            borderRadius: \"3px\",\n            cursor: \"pointer\",\n            fontSize: \"0.9em\",\n            }}\n          >\n            Send Transcript\n          </button>\n          <button\n            onClick={showTranscript_func}\n            style={{\n            backgroundColor: \"white\",\n            color: \"grey\",\n            border: \"none\",\n            padding: \"5px 10px\",\n            borderRadius: \"3px\",\n            cursor: \"pointer\",\n            fontSize: \"0.9em\",\n            }}\n          >\n            {show_transcript ? \"Hide Transcript\" : \"Show Transcript\"}\n          </button>\n          <button\n            onClick={clearTranscript_func}\n            style={{\n            backgroundColor: \"white\",\n            color: \"grey\",\n            border: \"none\",\n            padding: \"5px 10px\",\n            borderRadius: \"3px\",\n            cursor: \"pointer\",\n            fontSize: \"0.9em\",\n            }}\n          >\n            Clear Transcript\n          </button>\n          </div>\n          {show_transcript && (\n          <div\n            style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            maxHeight: \"800px\",\n            height: \"550px\",\n            overflowY: \"auto\",\n            border: \"1px solid #ccc\",\n            padding: \"10px\",\n            }}\n          >\n<span>\n  <strong>Listening:</strong>{\" \"}\n  <span\n    style={{\n      color: listening ? \"green\" : \"gray\",\n      fontWeight: 600,\n      animation: listening ? \"flash-green 1s infinite alternate\" : \"none\",\n    }}\n  >\n    {listening ? \"ON\" : \"OFF\"}\n  </span>\n  {/* Add the animation style only once in your component */}\n  <style>\n    {`\n      @keyframes flash-green {\n        0% { opacity: 1; }\n        100% { opacity: 0.4; }\n      }\n    `}\n  </style>\n</span>         \n            \n            <span>\n            <strong>Transcript:</strong>\n            </span>\n          {/* Live preview of interim transcript */}\n            {interimTranscript && (\n              <div style={{ color: \"#888\", fontStyle: \"italic\", marginBottom: \"8px\" }}>\n                {interimTranscript}\n              </div>\n            )}\n          <textarea\n            ref={textareaRef}\n            value={editableTranscript}\n            onChange={handleTranscriptChange}\n            style={{\n              backgroundColor: \"rgb(255, 255, 255)\",\n              color: \"black\",\n              width: \"100%\",\n              height: \"550px\",\n              border: \"1px solid #ccc\",\n              padding: \"5px\",\n              resize: \"none\",\n            }}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Dictaphone;","import React from 'react';\n\nconst MediaDisplay = ({ showImage, imageSrc, largeHeight = 100, largeWidth = 100, smallHeight = 40, smallWidth = 40 }) => {\n    // Determine the dimensions based on `showImage` status\n    const height = showImage ? largeHeight : smallHeight;\n    const width = showImage ? largeWidth : smallWidth;\n  \n    return (\n      <div className=\"p-2\" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        {/* Always show the image or video at the top center based on `showImage` */}\n        <div style={{ display: 'flex', justifyContent: 'center', width: '100%' }}>\n          {imageSrc && (\n            imageSrc.toLowerCase().endsWith(\".mp4\") ? (\n              <video\n                style={{ maxWidth: '100%', borderRadius: '8px', objectFit: 'cover' }}\n                height={height}\n                width={width}\n                controls={showImage} // Only show controls if `showImage` is true\n                autoPlay\n                loop={false}\n                muted\n              >\n                <source src={imageSrc} type=\"video/mp4\" />\n                Your browser does not support the video tag.\n              </video>\n            ) : (\n              <img\n                src={imageSrc}\n                height={height}\n                width={width}\n                style={{ maxWidth: '100%', borderRadius: '8px', objectFit: 'cover' }}\n                alt=\"Media Preview\"\n              />\n            )\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  export default MediaDisplay;","import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\n// import { Streamlit } from \"streamlit-component-lib\";\nimport SpeechRecognition from \"react-speech-recognition\";\nimport Dictaphone from \"./Dictaphone\";\nimport MediaDisplay from \"./MediaDisplay\";\nimport './spinner.css';\nimport ReactMarkdown from 'react-markdown';\n\n// import Dictaphone_ss from \"./Dictaphone_ss\";\n// import * as faceapi from \"@vladmandic/face-api\";\n// import DOMPurify from 'dompurify';\n\nlet timer = null;\nlet faceTimer = null;\nlet g_anwers = [];\nlet firstFace = false;\n\nconst CustomVoiceGPT = (props) => {\n  const { api, kwargs = {} } = props;\n  const {\n    commands,\n    height,\n    width,\n    show_video,\n    input_text,\n    no_response_time,\n    face_recon,\n    api_key,\n    refresh_ask,\n    self_image,\n    api_audio,\n    client_user,\n    force_db_root,\n    before_trigger,\n    agent_actions,\n  } = kwargs;\n\n  const [imageSrc, setImageSrc] = useState(kwargs.self_image);\n  const [imageSrc_name, setImageSrc_name] = useState(kwargs.self_image);\n\n  const [message, setMessage] = useState(\"\");\n  const [answers, setAnswers] = useState([]);\n  const [listenAfterReply, setListenAfterReply] = useState(false);\n\n  const [modelsLoaded, setModelsLoaded] = useState(false);\n  const [captureVideo, setCaptureVideo] = useState(false);\n  const [textString, setTextString] = useState(\"\");\n  const [apiInProgress, setApiInProgress] = useState(false); // Added state for API in progress\n  const [speaking, setSpeakingInProgress] = useState(false); // Added state for API in progresslistening\n  const [listening, setlistening] = useState(false); // Added state for API in progress\n\n  const [show_conversation, setshow_conversation] = useState(true); // Added state for API in progress\n  // Inside your component:\nconst [showTooltip, setShowTooltip] = useState(false);\nconst [showTooltip_conv, setShowTooltip_conv] = useState(false);\n  const [listenButton, setlistenButton] = useState(false); // Added state for API in progress\n  const [session_listen, setsession_listen] = useState(false);\n  const [convo_button, setconvo_button] = useState(false); // Added state for API in progress\n\n  const [before_trigger_vars, before_trigger_] = useState(kwargs.before_trigger); \n  const faceData = useRef([]);\n  const faceTriggered = useRef(false);\n  const videoRef = useRef();\n  const videoHeight = 480;\n  const videoWidth = 640;\n  const canvasRef = useRef();\n  const audioRef = useRef(null);\n  \n\n  const [UserUsedChatWindow, setUserUsedChatWindow] = useState(false);\n  const [buttonName, setButtonName] = useState(\"Click and Ask\");\n  const [buttonName_listen, setButtonName_listen] = useState(\"Listening\");\n\n  const [showImage, setShowImage] = useState(false); // Step 1: Define showImage state\n  const [selectedActions, setSelectedActions] = useState([]);\n  const [datatree, setDataTree] = useState(kwargs.datatree || {});\n  const [datatreeTitle, setDataTreeTitle] = useState(kwargs.datatree_title || \"\");\n\nuseEffect(() => {\n  if (kwargs.answers) {\n    setAnswers(kwargs.answers);\n  }\n}, [kwargs.answers]);\n\nconst [selectedNodes, setSelectedNodes] = useState([]);\n\n// SidebarTree with collapsible nodes, no text wrapping, and improved style\n// Move collapsed and setCollapsed state up to the parent component\nconst [collapsed, setCollapsed] = useState({});\n\nconst SidebarTree = ({ datatree = {}, onSelectionChange, collapsed, setCollapsed }) => {\n  // Remove local collapsed state from SidebarTree\n\n  const handleSelect = (key) => {\n    let newSelected;\n    if (selectedNodes.includes(key)) {\n      newSelected = selectedNodes.filter((k) => k !== key);\n    } else {\n      newSelected = [...selectedNodes, key];\n    }\n    if (onSelectionChange) onSelectionChange(newSelected);\n  };\n\n  // Use a unique path for each node\n  const toggleCollapse = (nodePath) => {\n    setCollapsed((prev) => ({\n      ...prev,\n      [nodePath]: prev[nodePath] === undefined ? false : !prev[nodePath],\n    }));\n  };\n\n  const renderNodes = (tree, level = 1, parentKeys = []) => {\n    if (!tree || typeof tree !== \"object\" || Array.isArray(tree)) return null;\n    const entries = Object.entries(tree);\n    return entries.map(([key, value], idx) => {\n      const nodePath = [...parentKeys, key].join(\"/\"); // Unique path for each node\n      const hasChildren =\n        value.children &&\n        typeof value.children === \"object\" &&\n        !Array.isArray(value.children) &&\n        Object.keys(value.children).length > 0;\n      const isCollapsed = collapsed[nodePath] !== undefined ? collapsed[nodePath] : true;\n      const isLast = idx === entries.length - 1;\n\n      return (\n        <div\n          key={nodePath}\n          style={{\n            marginLeft: level * 14,\n            position: \"relative\",\n            whiteSpace: \"nowrap\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n            fontSize: \"14px\",\n            fontFamily: \"inherit\",\n            marginBottom: \"2px\",\n            paddingTop: \"4px\",\n            paddingBottom: \"4px\",\n          }}\n        >\n          {level > 0 && (\n            <div\n              style={{\n                position: \"absolute\",\n                left: -5,\n                top: 0,\n                height: \"100%\",\n                width: 16,\n                zIndex: 0,\n              }}\n            >\n              <div\n                style={{\n                  position: \"absolute\",\n                  left: -5,\n                  top: 0,\n                  bottom: isLast ? \"50%\" : 0,\n                  width: 2,\n                  background: \"#bbb\",\n                  height: hasChildren && !isCollapsed ? \"50%\" : \"100%\",\n                }}\n              />\n              <div\n                style={{\n                  position: \"absolute\",\n                  left: 7,\n                  top: 12,\n                  width: 9,\n                  height: 2,\n                  background: \"#bbb\",\n                }}\n              />\n            </div>\n          )}\n          <div style={{ display: \"flex\", alignItems: \"center\", position: \"relative\", zIndex: 1 }}>\n            {hasChildren && (\n              <button\n                onClick={() => toggleCollapse(nodePath)}\n                style={{\n                  border: \"none\",\n                  background: \"transparent\",\n                  cursor: \"pointer\",\n                  fontSize: \"14px\",\n                  marginRight: \"4px\",\n                  padding: 0,\n                  width: \"18px\",\n                  height: \"18px\",\n                  lineHeight: \"18px\",\n                  userSelect: \"none\",\n                }}\n                aria-label={isCollapsed ? \"Expand\" : \"Collapse\"}\n                tabIndex={-1}\n              >\n                {isCollapsed ? \"▶\" : \"▼\"}\n              </button>\n            )}\n            <input\n              type=\"checkbox\"\n              checked={selectedNodes.includes(key)}\n              onChange={() => handleSelect(key)}\n              style={{ marginRight: \"10px\" }}\n            />\n            {value.hyperlink ? (\n              <a\n                href={value.hyperlink}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                style={{\n                  textDecoration: \"none\",\n                  color: \"#2980b9\",\n                  fontWeight: 500,\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                  whiteSpace: \"nowrap\",\n                  maxWidth: \"100%\",\n                  display: \"inline-block\",\n                  verticalAlign: \"middle\",\n                }}\n                title={value.field_name}\n              >\n                {value.field_name}\n              </a>\n            ) : (\n              <span\n                style={{\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                  whiteSpace: \"nowrap\",\n                  maxWidth: \"160px\",\n                  display: \"inline-block\",\n                  verticalAlign: \"middle\",\n                }}\n                title={value.field_name}\n              >\n                {value.field_name}\n              </span>\n            )}\n          </div>\n          {hasChildren && !isCollapsed && (\n            <div style={{ width: \"100%\" }}>\n              {renderNodes(value.children, level + 1, [...parentKeys, key])}\n            </div>\n          )}\n        </div>\n      );\n    });\n  };\n\n  if (!datatreeTitle || !datatree) return null;\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        padding: 10,\n        maxHeight: 800,\n        overflowY: \"auto\",\n        background: \"transparent\",\n      }}\n    >\n      <h4 style={{ margin: \"0 0 8px 0\", fontWeight: 600 }}>{datatreeTitle}</h4>\n      <div>{renderNodes(datatree)}</div>\n    </div>\n  );\n};\n\n  const [windowWidth, setWindowWidth] = useState(0); // Initial value\n\n    // Create a reusable function for getting the window width\n    const updateWindowWidth = () => {\n      if (typeof window !== 'undefined') {\n          setWindowWidth(window.innerWidth);\n      }\n  };\n\n  // Call the function on component mount to set the initial window width\n  useEffect(() => {\n      updateWindowWidth();\n  }, []);\n\n  useEffect(() => {\n    if (self_image) {\n      // Fetch the image data from the API endpoint\n      fetchImageData(self_image);\n    }\n  }, [self_image]);\n\n  const fetchImageData = async (imageUrl) => {\n    try {\n      const response = await axios.get(`${api_audio}${imageUrl}`, {\n        responseType: 'blob', // Set responseType to 'blob' to handle file response\n      });\n      const objectUrl = URL.createObjectURL(response.data); // Use a different variable name here\n      setImageSrc(objectUrl);\n      setImageSrc_name(imageUrl)\n    } catch (error) {\n      console.error('Error fetching image data:', error);\n    }\n  };\n\n\n\n  const stopListening = () => {\n    setlistening(false);\n    SpeechRecognition.stopListening();\n    console.log(\"Stopping Listening, isListening=\", listening)\n  }\n\n  const listenContinuously = () =>{\n    setlistening(true)\n    SpeechRecognition.startListening({\n      continuous: true,\n      language: \"en-GB\",\n    })\n\n}\n\n\nconst convo_mode = () => {\n  console.log(\"listening?\", listening);\n  if (!listening) {\n    console.log(\"Starting to listen...\");\n    setconvo_button(true)\n    listenContinuously();\n  } else {\n    console.log(\"Stopping listening...\");\n    setconvo_button(false)\n    stopListening();\n  }\n};\n\nuseEffect(() => {\n  if (!listening && convo_button) {\n    listenContinuously();\n  }\n}, [listening, convo_button]);\n\n\n  const listenSession = () =>{\n    if (session_listen) {\n    setsession_listen(false)\n  }\n  else{\n    setsession_listen(true)\n  }\n    }\n\n  // useEffect(() => {\n  //   const loadModels = async () => {\n  //     const MODEL_URL = process.env.PUBLIC_URL + \"/models\";\n\n  //     Promise.all([\n  //       faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),\n  //       faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),\n  //       faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL),\n  //       faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL),\n  //       faceapi.nets.ageGenderNet.loadFromUri(MODEL_URL),\n  //     ]).then(() => setModelsLoaded(true));\n  //   };\n  //   loadModels();\n  //   const interval = setInterval(() => {\n  //     // console.log(\"faceData.current :>> \", faceData.current);\n  //   }, 3000);\n  //   return () => clearInterval(interval);\n  // }, []);\n\n\n  const handleInputText = (event) => {\n    // Update the state with the input text\n    setTextString(event.target.value);\n  \n    // Set a variable to indicate that the user used the chat window\n    setUserUsedChatWindow(true);\n  };\n\n  const handleOnKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      console.log(\"textString :>> \", textString);\n      myFunc(textString, { api_body: { keyword: \"\" } }, 4);\n      setTextString(\"\");\n    }\n  };\n\n  // const startVideo = () => {\n  //   setCaptureVideo(true);\n  //   navigator.mediaDevices\n  //     .getUserMedia({ video: { width: 300 } })\n  //     .then((stream) => {\n  //       let video = videoRef.current;\n  //       video.srcObject = stream;\n  //       video.play();\n  //     })\n  //     .catch((err) => {\n  //       console.error(\"error:\", err);\n  //     });\n  // };\n\n  // const handleVideoOnPlay = () => {\n  //   setInterval(async () => {\n  //     if (canvasRef && canvasRef.current) {\n  //       canvasRef.current.innerHTML = faceapi.createCanvasFromMedia(\n  //         videoRef.current\n  //       );\n  //       const displaySize = {\n  //         width: videoWidth,\n  //         height: videoHeight,\n  //       };\n\n  //       faceapi.matchDimensions(canvasRef.current, displaySize);\n\n  //       const detections = await faceapi\n  //         .detectAllFaces(\n  //           videoRef.current,\n  //           new faceapi.TinyFaceDetectorOptions()\n  //         )\n  //         .withFaceLandmarks()\n  //         .withFaceExpressions();\n\n  //       const resizedDetections = faceapi.resizeResults(detections, displaySize);\n\n  //       if (resizedDetections.length > 0) {\n  //         faceData.current = resizedDetections;\n  //         if (!faceTriggered.current && face_recon) {\n  //           myFunc(\"\", { api_body: { keyword: \"\" } }, 2);\n  //           faceTriggered.current = true;\n  //         }\n  //       } else {\n  //         faceTimer && clearTimeout(faceTimer);\n  //         setTimeout(() => {\n  //           faceData.current = [];\n  //         }, 1000);\n  //       }\n\n  //       if (resizedDetections.length > 0 && !firstFace) {\n  //         firstFace = true;\n  //         if (kwargs.hello_audio) {\n  //           const audio = new Audio(kwargs.hello_audio);\n  //           audio.play();\n  //         }\n  //       }\n\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         canvasRef.current\n  //           .getContext(\"2d\")\n  //           .clearRect(0, 0, videoWidth, videoHeight);\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         faceapi.draw.drawDetections(canvasRef.current, resizedDetections);\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         faceapi.draw.drawFaceLandmarks(canvasRef.current, resizedDetections);\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         faceapi.draw.drawFaceExpressions(\n  //           canvasRef.current,\n  //           resizedDetections\n  //         );\n  //     }\n  //   }, 300);\n  // };\n\n  // const closeWebcam = () => {\n  //   videoRef.current.pause();\n  //   videoRef.current.srcObject.getTracks()[0].stop();\n  //   setCaptureVideo(false);\n  // };\n\n  const click_listenButton = () => {\n    setlistenButton(true)\n    if (!listening) {\n      listenContinuously()\n    }\n    setButtonName(\"Please Speak\")\n    console.log(\"listening button listen click\");\n    console.log(listenButton);\n  };\n  const [editingDataframe, setEditingDataframe] = useState(null);\n  const [editedDataframe, setEditedDataframe] = useState(null);\n\n  const myFunc = async (ret, command, type) => {\n    setMessage(` (${command[\"api_body\"][\"keyword\"]}) ${ret},`);\n    const text = [...g_anwers, { user: ret }];\n    setAnswers([...text]);\n    try {\n      console.log(\"api call on listen...\", command);\n      console.log(\"selected_nodes\", selectedNodes);\n      setApiInProgress(true); // Set API in progress to true\n      // stopListening()\n      // how do I get the dataframe from type?\n      let dataframe = null;\n      if (type === \"dataframe_edit\" && command.api_body && command.api_body.dataframe) {\n        dataframe = command.api_body.dataframe;\n      }\n      const body = {\n        tigger_type: type,\n        api_key: api_key,\n        text: text,\n        self_image: imageSrc_name,\n        face_data: faceData.current,\n        refresh_ask: refresh_ask,\n        client_user: client_user,\n        force_db_root:force_db_root,\n        session_listen:session_listen,\n        before_trigger_vars:before_trigger_vars,\n        selected_actions: selectedActions,\n        selected_nodes: selectedNodes,\n        dataframe: dataframe,\n      };\n      console.log(\"api\");\n      const { data } = await axios.post(api, body);\n      console.log(\"data :>> \", data, body);\n      if (data[\"self_image\"] && data[\"self_image\"] !== imageSrc_name) {\n        fetchImageData(data[\"self_image\"]); // Fetch image data if it's different\n      }\n      \n      if (data[\"text\"]) {\n        setAnswers(data[\"text\"]);\n        g_anwers = [...data[\"text\"]];\n      }\n      \n      if (audioRef.current) {\n        audioRef.current.pause(); // Pause existing playback if any\n      }\n\n      if (data[\"audio_path\"]) {\n        const apiUrlWithFileName = `${api_audio}${data[\"audio_path\"]}`;\n        audioRef.current = new Audio(apiUrlWithFileName);\n    \n        try {\n            await audioRef.current.play();\n            \n            // Set state to indicate speaking in progress\n            setSpeakingInProgress(true);\n            setButtonName_listen(\"Speaking\");\n    \n            // Await playback completion\n            await new Promise((resolve) => {\n                audioRef.current.onended = () => {\n                    console.log(\"Audio playback finished.\");\n                    resolve();\n                };\n            });\n    \n        } catch (error) {\n            console.error(\"Audio playback error:\", error);\n        } finally {\n            // Cleanup or reset after playback\n            audioRef.current = null;\n            setSpeakingInProgress(false);\n            setButtonName_listen(\"Listen\");\n        }\n    }\n\n      setButtonName(\"Click and Ask\")\n      setButtonName_listen(\"Listening\")\n      setSpeakingInProgress(false)\n      setApiInProgress(false)\n      setListenAfterReply(data[\"listen_after_reply\"]);\n      \n      console.log(\"listen after reply\", data[\"listen_after_reply\"], listenAfterReply);\n\n      if (data[\"page_direct\"] !== false && data[\"page_direct\"] !== null) {\n        console.log(\"api has page direct\", data[\"page_direct\"]);\n        // window.location.reload();\n        window.location.href = data[\"page_direct\"];\n      }\n\n      if (UserUsedChatWindow) {\n        setUserUsedChatWindow(false)\n      }\n      else if (listenAfterReply==true) {\n        console.log(\"API END HIT listenAfterReply==TRUE\")\n        setButtonName_listen(\"Awaiting your Answer please speak\")\n      }\n      else if (listenButton) {\n      setlistenButton(false)\n      stopListening()\n      }\n      else if (convo_button){\n        console.log(\"convo mode\")\n        // listenContinuously()\n      }\n\n      if (data[\"dataframe\"]) {\n        setEditingDataframe(data[\"dataframe\"]);\n        setEditedDataframe(data[\"dataframe\"]);\n        return; // Exit further processing if you want\n}\n\n      \n    } catch (error) {\n      console.log(\"api call on listen failed!\", error);\n      setApiInProgress(false); // Set API in progress to false on error\n      setlistenButton(false)\n    }\n\n    updateWindowWidth();\n    console.log(\"ReSize Window\")\n  };\n\n// Recursive function to find a node by key in the datatree\nfunction findNodeByKey(tree, key) {\n  if (!tree || typeof tree !== \"object\") return null;\n  for (const [k, value] of Object.entries(tree)) {\n    if (k === key) return value;\n    if (value.children) {\n      const found = findNodeByKey(value.children, key);\n      if (found) return found;\n    }\n  }\n  return null;\n}\n\n  const background_color_chat = refresh_ask?.color_dict?.background_color_chat || 'transparent';\n  const splitImage = self_image.split('.')[0]; // Split by dot\n  const placeholder = `Chat with ${splitImage}`;\n  console.log(\"session_listen\", session_listen)\n  console.log(\"selectedNodes\", selectedNodes)\n  const firstKey = selectedNodes[0] || null;\n  const nodeObj = firstKey ? findNodeByKey(datatree, firstKey) : null;\n  const nodeTitle = nodeObj?.field_name;\n  const nodeLink = nodeObj?.hyperlink;\n\n//     console.log(\"selectedNodes\", selectedNodes)\n// };\n\n  const [showSidebar, setShowSidebar] = useState(false);\n  const [sidebarWide, setSidebarWide] = useState(450);\n\n  return (\n    <div style={{ display: \"flex\", width: \"100%\" }}>\n\n      {/* Sidebar Toggle and Sidebar */}\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n        {/* Sidebar Toggle Button */}\n        <div style={{ display: \"flex\", alignItems: \"center\", padding: \"4px 8px\" }}>\n          <button\n            onClick={() => setShowSidebar((prev) => !prev)}\n            style={{\n              fontSize: \"18px\",\n              padding: \"4px 10px\",\n              marginRight: \"6px\",\n              border: \"none\",\n              borderRadius: \"50%\",\n              background: \"transparent\",\n              color: \"#2980b9\",\n              cursor: \"pointer\",\n              height: \"32px\",\n              width: \"32px\",\n              boxShadow: \"none\",\n              outline: \"none\",\n              transition: \"background 0.2s\",\n            }}\n            aria-label={showSidebar ? \"Hide Sidebar\" : \"Show Sidebar\"}\n          >\n            {showSidebar ? \"⏴\" : \"⏵\"}\n          </button>\n        </div>\n        {/* Sidebar Width Toggle Button (only visible when sidebar is open) */}\n          {showSidebar && (\n            <button\n              onClick={() => setSidebarWide((prev) => (prev === 450 ? 250 : 450))}\n              style={{\n                // fontSize: \"10px\",\n                // padding: \"2px 3px\",\n                border: \"transparent\",\n                // borderRadius: \"1px\",\n                background: \"transparent\",\n                cursor: \"pointer\",\n                height: \"32px\",\n                margin: \"6px 0 0 0\",\n                width: \"32px\",\n                alignSelf: \"flex-end\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                borderRadius: \"50%\",\n                boxShadow: \"none\",\n                transition: \"background 0.2s\",\n                }}\n              >\n                {sidebarWide === 450 ? (\n                <span>⏪</span>\n                ) : (\n                <span>⏩</span>\n                )}\n              </button>\n              )}\n              {/* Sidebar Tree */}\n        {showSidebar && (\n          <div style={{ width: sidebarWide, borderRight: \"1px solid #ccc\", padding: 10, transition: \"width 0.2s\" }}>\n            <SidebarTree\n              datatree={datatree}\n              onSelectionChange={setSelectedNodes}\n              collapsed={collapsed}\n              setCollapsed={setCollapsed}\n            />          \n            </div>\n        )}\n      </div>\n\n      {/* Main Content */}\n      <div className=\"p-2\" style={{ flex: 1 }}>\n\n<div>\n  {firstKey && nodeObj ? (\n    <div>\n      Working Page:{\" \"}\n      {nodeLink ? (\n        <a href={nodeLink} target=\"_blank\" rel=\"noopener noreferrer\">\n          {nodeTitle}\n        </a>\n      ) : (\n        nodeTitle\n      )}\n    </div>\n  ) : (\n    <div></div>\n  )}\n\n  {/* Show other selected nodes, if any */}\n  {selectedNodes.length > 1 && (\n    <div style={{ marginTop: 8 }}>\n      <strong>Extra Context:</strong>{\" \"}\n      {selectedNodes.slice(1).map((key, idx) => {\n        const node = findNodeByKey(datatree, key);\n        return (\n          <span key={key} style={{ marginRight: 8 }}>\n            {node?.field_name || key}\n            {idx < selectedNodes.length - 2 ? \",\" : \"\"}\n          </span>\n        );\n      })}\n    </div>\n  )}\n</div>\n  \n        <div style={{ display: 'flex', flexDirection: 'column', width: '100%' }}>\n          {/* Image or video section */}\n          <div>\n            {/* Media Display */}\n            <MediaDisplay\n              showImage={showImage}\n              imageSrc={imageSrc}\n              largeHeight={100}\n              largeWidth={100}\n              smallHeight={40}\n              smallWidth={40}\n            />\n          </div>\n\n          {/* Chat window, taking full width if no image is shown */}\n          <div style={{ flex: showImage ? 1 : '100%', overflowY: 'auto', maxHeight: '450px' }}>\n            {show_conversation && (\n              <div\n                style={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  maxHeight: '450px',\n                  height: '450px',\n                  overflowY: 'auto',\n                  // border: '1px solid #ccc',\n                  padding: '10px',\n                }}\n              >\n                {answers.map((answer, idx) => (\n                  <div\n                    key={idx}\n                    className=\"chat-message-container\"\n                    style={{\n                      marginBottom: '5px',\n                      padding: '5px',\n                      borderRadius: '4px',\n                      border: '1px solid #ccc',\n                      boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n                    }}\n                  >\n                    <div\n                      className=\"chat-user\"\n                      style={{\n                        // backgroundColor: '#e4eafe',\n                        textAlign: 'right',\n                        marginLeft: 'auto',\n                        padding: '5px',\n                      }}\n                    >\n                      {client_user}: <span>{answer.user}</span>\n                    </div>\n                    <div\n                      className=\"chat-response-container\"\n                      style={{\n                        display: 'flex',\n                        alignItems: 'flex-start',\n                        backgroundColor: background_color_chat,\n                        padding: '10px',\n                      }}\n                    >\n                      {imageSrc && (\n                        <div className=\"chat-image\" style={{ marginRight: '10px' }}>\n                          <img src={imageSrc} alt=\"response\" style={{ width: '50px' }} />\n                        </div>\n                      )}\n                      <div\n                        className=\"chat-response-text\"\n                        style={{ flex: 1, wordBreak: 'break-word' }}\n                      >\n                        {answer.resp\n                          ? <span dangerouslySetInnerHTML={{ __html: answer.resp }} />\n                          : <span className=\"spinner\" />}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Input text section */}\n{input_text && (\n  <>\n    <hr style={{ margin: '3px 0' }} />\n    <div className=\"form-group\" style={{ display: \"flex\", alignItems: \"center\" }}>\n\n      <input\n        className=\"form-control\"\n        type=\"text\"\n        placeholder={placeholder}\n        value={textString}\n        onChange={handleInputText}\n        onKeyDown={handleOnKeyDown}\n        style={{ flex: 1 }}\n      />\n\n    </div>\n    <hr style={{ margin: '3px 0' }} />\n  </>\n)}\n\n          {editingDataframe &&\n            Array.isArray(editingDataframe) &&\n            editingDataframe.length > 0 &&\n            editedDataframe &&\n            Array.isArray(editedDataframe) &&\n            editedDataframe.length > 0 && (\n              <div\n                style={{\n            padding: 20,\n            border: \"2px solid #b3c6e0\",\n            borderRadius: \"12px\",\n            background: \"rgba(240, 248, 255, 0.7)\",\n            boxShadow: \"0 2px 12px rgba(100, 150, 200, 0.08)\",\n            marginBottom: 16,\n            marginTop: 8,\n                }}\n              >\n                <h3 style={{ marginTop: 0, color: \"#2a3b5d\" }}>Edit Dataframe</h3>\n                <table\n            style={{\n              borderCollapse: \"collapse\",\n              width: \"100%\",\n              background: \"rgba(255,255,255,0.5)\",\n              borderRadius: \"8px\",\n              overflow: \"hidden\",\n              boxShadow: \"0 1px 4px rgba(100,150,200,0.06)\",\n            }}\n                >\n            <thead>\n              <tr>\n                {Object.keys(editingDataframe[0]).map((col) => (\n                  <th\n              key={col}\n              style={{\n                border: \"1px solid #c8d6e5\",\n                padding: 6,\n                background: \"rgba(200,220,255,0.35)\",\n                color: \"#2a3b5d\",\n                fontWeight: 600,\n              }}\n                  >\n              {col}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {editedDataframe.map((row, rowIdx) => (\n                <tr key={rowIdx}>\n                  {Object.keys(row).map((col) => (\n              <td\n                key={col}\n                style={{\n                  border: \"1px solid #c8d6e5\",\n                  padding: 4,\n                  background: \"rgba(255,255,255,0.3)\",\n                }}\n              >\n                <input\n                  value={row[col]}\n                  onChange={e => {\n                    const newDF = editedDataframe.map((r, i) =>\n                i === rowIdx ? { ...r, [col]: e.target.value } : r\n                    );\n                    setEditedDataframe(newDF);\n                  }}\n                  style={{\n                    width: \"100%\",\n                    background: \"rgba(255,255,255,0.5)\",\n                    border: \"1px solid #b3c6e0\",\n                    borderRadius: \"4px\",\n                    padding: \"2px 4px\",\n                    color: \"#2a3b5d\",\n                  }}\n                />\n              </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n                </table>\n                <div style={{ marginTop: 12 }}>\n            <button\n              style={{\n                marginRight: 8,\n                background: \"rgba(42, 59, 93, 0.8)\",\n                color: \"#fff\",\n                border: \"none\",\n                borderRadius: \"4px\",\n                padding: \"6px 14px\",\n                cursor: \"pointer\",\n              }}\n              onClick={async () => {\n                // Send editedDataframe to API\n  await myFunc(textString, { api_body: { dataframe: editedDataframe } }, \"dataframe_edit\");\n  setEditingDataframe(null);\n  setEditedDataframe(null);\n              }}\n            >\n              Save\n            </button>\n            <button\n              style={{\n                background: \"rgba(200,220,255,0.5)\",\n                color: \"#2a3b5d\",\n                border: \"none\",\n                borderRadius: \"4px\",\n                padding: \"6px 14px\",\n                cursor: \"pointer\",\n              }}\n              onClick={() => {\n                setEditingDataframe(null);\n                setEditedDataframe(null);\n              }}\n            >\n              Cancel\n            </button>\n                </div>\n              </div>\n          )}\n\n    <div className=\"form-group\" style={{ display: \"flex\", alignItems: \"left\" }}>\n\n      <button\n        onClick={click_listenButton}\n        style={{\n          marginLeft: 8,\n          background: listenButton ? 'rgb(26, 182, 28)' : \"rgb(19, 123, 193)\",\n          border: 'none',\n          borderRadius: '50%',\n          width: 36,\n          height: 36,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          cursor: 'pointer',\n          color: 'white',\n          fontSize: 20,\n          boxShadow: '0 1px 4px rgba(0,0,0,0.08)',\n          transition: 'background 0.2s',\n        }}\n        title=\"Click and Ask\"\n      >\n        <span role=\"img\" aria-label=\"microphone\">🎤</span>\n      </button>\n      \n<button\n  onClick={convo_mode}\n  onMouseEnter={() => setShowTooltip_conv(true)}\n  onMouseLeave={() => setShowTooltip_conv(false)}\n  style={{\n    marginLeft: 8,\n    background: convo_button ? 'rgb(26, 182, 28)' : \"rgb(19, 123, 193)\",\n    border: 'none',\n    borderRadius: '50%',\n    width: 36,\n    height: 36,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    cursor: 'pointer',\n    color: 'white',\n    fontSize: 20,\n    boxShadow: '0 1px 4px rgba(0,0,0,0.08)',\n    transition: 'background 0.2s',\n    position: 'relative',\n  }}\n>\n<span role=\"img\" aria-label={convo_button ? \"paper\" : \"x\"}>\n  {convo_button ? \"🎧\" : \"🔇\"}\n</span>  {showTooltip_conv && (\n    <span\n      style={{\n        position: \"absolute\",\n        top: \"-38px\",\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n        background: \"#222\",\n        color: \"#fff\",\n        padding: \"4px 10px\",\n        borderRadius: \"4px\",\n        fontSize: \"13px\",\n        whiteSpace: \"nowrap\",\n        zIndex: 1000,\n        pointerEvents: \"none\",\n      }}\n    >\n      {convo_button ? \"Listening On\" : \"Listening OFF\"}\n    </span>\n  )}\n</button>\n\n\n<button\n  onClick={listenSession}\n  onMouseEnter={() => setShowTooltip(true)}\n  onMouseLeave={() => setShowTooltip(false)}\n  style={{\n    marginLeft: 8,\n    background: session_listen ? 'rgb(26, 182, 28)' : \"rgb(19, 123, 193)\",\n    border: 'none',\n    borderRadius: '50%',\n    width: 36,\n    height: 36,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    cursor: 'pointer',\n    color: 'white',\n    fontSize: 20,\n    boxShadow: '0 1px 4px rgba(0,0,0,0.08)',\n    transition: 'background 0.2s',\n    position: 'relative',\n  }}\n>\n<span role=\"img\" aria-label={session_listen ? \"paper\" : \"x\"}>\n  {session_listen ? \"📄\" : \"📄\"}\n</span>  {showTooltip && (\n<span\n  style={{\n    position: \"absolute\",\n    top: \"-38px\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    background: \"#222\",\n    color: \"#fff\",\n    padding: \"4px 10px\",\n    borderRadius: \"4px\",\n    fontSize: \"13px\",\n    whiteSpace: \"normal\",      // allow text to wrap\n    maxWidth: \"220px\",         // prevent it from being too wide\n    textAlign: \"center\",       // center the text\n    zIndex: 1000,\n    pointerEvents: \"none\",\n  }}\n>\n  {session_listen ? \"ON\" : \"Keep Transcript Inplace\"}\n</span>\n  )}\n</button>\n\n</div>\n\n\n              {/* Agent Actions Horizontal Button-Style Multi-Select */}\n                {Array.isArray(agent_actions) && agent_actions.length > 0 && (\n                  <div\n                    style={{\n                      display: 'flex',\n                      flexWrap: 'wrap',\n                      justifyContent: 'right',\n                      marginTop: '8px',\n                      gap: '6px',\n                      alignItems: 'right',\n                    }}\n                  >\n                    <span style={{ fontWeight: 600, marginRight: 12, minWidth: 90, textAlign: 'left' }}>\n                      Agent Actions:\n                    </span>\n                    {agent_actions.map((action, idx) => {\n              const selected = selectedActions.includes(action);\n              return (\n                <button\n                  key={idx}\n                  onClick={() => {\n                    if (selected) {\n                      setSelectedActions(selectedActions.filter((a) => a !== action));\n                    } else {\n                      setSelectedActions([...selectedActions, action]);\n                    }\n                  }}\n                  style={{\n                    fontSize: '12px',\n                    padding: '5px 10px',\n                    backgroundColor: selected ? 'rgb(59, 159, 72)' : 'rgb(200, 233, 238)',\n                    color: selected ? 'white' : 'black',\n                    border: '1px solidrgb(239, 242, 244)',\n                    borderRadius: '4px',\n                    cursor: 'pointer',\n                  }}\n                >\n                  {action}\n                </button>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Dictaphone component */}\n        <div className=\"p-2\" style={{ marginBottom: '15px' }}>\n          <Dictaphone\n            commands={commands}\n            myFunc={myFunc}\n            listenAfterReply={listenAfterReply}\n            no_response_time={no_response_time}\n            apiInProgress={apiInProgress}\n            listenButton={listenButton}\n            session_listen={session_listen}\n            listening={listening}\n            initialFinalTranscript={kwargs.initialFinalTranscript || \"\"}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CustomVoiceGPT;\n","import React, { useEffect, useState } from \"react\"\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport VoiceGPT from \"./VoiceGPT.jsx\"\n\nconst Main = (props: ComponentProps) => {\n  const { api, kwargs } = props.args\n  useEffect(() => Streamlit.setFrameHeight())\n  return (\n    <>\n      <VoiceGPT api={api} kwargs={kwargs} />\n    </>\n  )\n}\n\nexport default withStreamlitConnection(Main)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Main from \"./Main\"\n// Lots of import to define a Styletron engine and load the light theme of baseui\nimport { Client as Styletron } from \"styletron-engine-atomic\"\nimport { Provider as StyletronProvider } from \"styletron-react\"\nimport { ThemeProvider, LightTheme } from \"baseui\"\n\nconst engine = new Styletron()\n\n// Wrap your CustomSlider with the baseui them\nReactDOM.render(\n  <React.StrictMode>\n    <StyletronProvider value={engine}>\n      <ThemeProvider theme={LightTheme}>\n        <Main />\n      </ThemeProvider>\n    </StyletronProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}