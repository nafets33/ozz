{"version":3,"sources":["Dictaphone.jsx","MediaDisplay.jsx","VoiceGPT.jsx","Main.tsx","index.tsx"],"names":["Dictaphone","_ref","commands","myFunc","listenAfterReply","no_response_time","apiInProgress","listenButton","session_listen","finalTranscript","interimTranscript","resetTranscript","listening","browserSupportsSpeechRecognition","isMicrophoneAvailable","useSpeechRecognition","editableTranscript","setEditableTranscript","useState","show_transcript","setShowTranscript","useEffect","processTranscript","keywordFound","i","length","keywords","api_body","j","keyword","RegExp","search","console","log","prev","trim","React","createElement","Fragment","style","display","flexDirection","maxHeight","height","overflowY","border","padding","value","onChange","e","target","backgroundColor","color","width","resize","onClick","marginTop","borderRadius","cursor","showTranscript_func","clearTranscript_func","MediaDisplay","showImage","imageSrc","largeHeight","largeWidth","smallHeight","smallWidth","className","alignItems","justifyContent","toLowerCase","endsWith","maxWidth","objectFit","controls","autoPlay","loop","muted","src","type","alt","g_anwers","CustomVoiceGPT","props","_refresh_ask$color_di","api","kwargs","show_video","input_text","face_recon","api_key","refresh_ask","self_image","api_audio","client_user","force_db_root","before_trigger","agent_actions","setImageSrc","imageSrc_name","setImageSrc_name","message","setMessage","answers","setAnswers","setListenAfterReply","modelsLoaded","setModelsLoaded","captureVideo","setCaptureVideo","textString","setTextString","setApiInProgress","speaking","setSpeakingInProgress","setlistening","show_conversation","setshow_conversation","setlistenButton","setsession_listen","convo_button","setconvo_button","before_trigger_vars","before_trigger_","faceData","useRef","audioRef","UserUsedChatWindow","setUserUsedChatWindow","buttonName","setButtonName","buttonName_listen","setButtonName_listen","setShowImage","selectedActions","setSelectedActions","windowWidth","setWindowWidth","updateWindowWidth","window","innerWidth","fetchImageData","async","response","axios","get","imageUrl","responseType","objectUrl","URL","createObjectURL","data","error","stopListening","SpeechRecognition","listenContinuously","startListening","continuous","language","ret","command","text","user","body","tigger_type","face_data","current","selected_actions","post","pause","apiUrlWithFileName","Audio","play","Promise","resolve","onended","location","href","background_color_chat","color_dict","placeholder","split","flex","map","answer","idx","key","marginBottom","boxShadow","textAlign","marginLeft","marginRight","wordBreak","dangerouslySetInnerHTML","__html","resp","margin","event","onKeyDown","fontSize","click_listenButton","convo_mode","backgroundImage","animation","background","listenSession","Array","isArray","flexWrap","gap","action","selected","includes","filter","a","withStreamlitConnection","args","Streamlit","setFrameHeight","VoiceGPT","engine","Styletron","ReactDOM","render","StrictMode","StyletronProvider","ThemeProvider","theme","LightTheme","Main","document","getElementById"],"mappings":"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","file":"static/js/main.4bb466bb.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\n\nconst Dictaphone = ({\n  commands,\n  myFunc,\n  listenAfterReply = false,\n  no_response_time = 3,\n  apiInProgress = false,\n  listenButton = false,\n  session_listen = false,\n}) => {\n  const {\n    finalTranscript,\n    interimTranscript,\n    resetTranscript,\n    listening,\n    browserSupportsSpeechRecognition,\n    isMicrophoneAvailable,\n  } = useSpeechRecognition();\n\n  const [editableTranscript, setEditableTranscript] = useState(\"\"); // State for editable transcript\n  const [show_transcript, setShowTranscript] = useState(true);\n\n  const showTranscript_func = () => setShowTranscript((prev) => !prev);\n  const clearTranscript_func = () => {\n    resetTranscript();\n    setEditableTranscript(\"\"); // Clear editable transcript\n  };\n\n  // Logic to process transcript based on session_listen\n  const processTranscript = () => {\n    if (finalTranscript !== \"\") {\n      // console.log(\"Listening?\", listening);\n      // console.log(\"listenAfterReply:\", listenAfterReply);\n      // console.log(\"session_listen:\", session_listen);\n      // console.log(\"apiInProgress:\", apiInProgress);\n  \n      if (session_listen) {\n        // Check for keywords only when session_listen is true\n        let keywordFound = false;\n        for (let i = 0; i < commands.length; i++) {\n          const { keywords, api_body } = commands[i];\n          for (let j = 0; j < keywords.length; j++) {\n            const keyword = new RegExp(keywords[j], \"i\");\n            const isKeywordFound = finalTranscript.search(keyword) !== -1;\n  \n            if (isKeywordFound && !apiInProgress) {\n              console.log(`Keyword found: ${keywords[j]}`);\n              myFunc(finalTranscript, commands[i], 1);\n              resetTranscript(); // Reset transcript after processing keyword\n              setEditableTranscript(\"\"); // Clear editable transcript state\n              keywordFound = true;\n              return;\n            }\n          }\n        }\n  \n        if (!keywordFound) {\n          // Append transcript if no keyword is found\n          setEditableTranscript((prev) => `${prev} ${finalTranscript}`.trim());\n          resetTranscript(); // Clear finalTranscript after appending\n        }\n      } else {\n        // When session_listen is false, focus on capturing speech-to-text\n        console.log(\"Recording speech-to-text without keyword triggers\");\n        setEditableTranscript((prev) => `${prev} ${finalTranscript}`.trim());\n        resetTranscript(); // Clear finalTranscript after appending\n      }\n    }\n  };\n\n  // Use processTranscript in useEffect to handle updates\n  useEffect(() => {\n    processTranscript();\n  }, [finalTranscript]);\n\n  const handleTranscriptChange = (e) => {\n    setEditableTranscript(e.target.value); // Update editable transcript based on user input\n  };\n\n  if (!browserSupportsSpeechRecognition) {\n    return <span>No browser support</span>;\n  }\n\n  if (!isMicrophoneAvailable) {\n    return <span>Please allow access to the microphone</span>;\n  }\n\n  return (\n    <>\n      {show_transcript && (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            maxHeight: \"800px\",\n            height: \"550px\",\n            overflowY: \"auto\",\n            border: \"1px solid #ccc\",\n            padding: \"10px\",\n          }}\n        >\n          <span>\n            <strong>Listening:</strong> {listening ? \"on\" : \"off\"}\n          </span>\n          <span>\n            <strong>Transcript:</strong>\n          </span>\n          <textarea\n            value={editableTranscript}\n            onChange={handleTranscriptChange}\n            style={{\n              backgroundColor: \"rgb(238, 242, 245)\",\n              color: \"black\",\n              width: \"100%\",\n              height: \"550px\",\n              border: \"1px solid #ccc\",\n              padding: \"5px\",\n              resize: \"none\",\n            }}\n          />\n        </div>\n      )}\n<button\n  onClick={() => {\n    myFunc(editableTranscript, { api_body: {} }, 5); // Pass the editable transcript to myFunc\n    resetTranscript(); // Reset the transcript after sending\n    setEditableTranscript(\"\"); // Clear the editable transcript state\n  }}\n  style={{\n    marginTop: \"10px\",\n    backgroundColor: \"rgb(196, 230, 252)\",\n    color: \"black\",\n    border: \"none\",\n    padding: \"10px 20px\",\n    borderRadius: \"5px\",\n    cursor: \"pointer\",\n  }}\n>\n  Send Transcript\n</button>\n      <button\n        onClick={showTranscript_func}\n        style={{\n          marginTop: \"10px\",\n          backgroundColor: \"white\",\n          color: \"grey\",\n          border: \"none\",\n          padding: \"10px 20px\",\n          borderRadius: \"5px\",\n          cursor: \"pointer\",\n        }}\n      >\n        {show_transcript ? \"Hide Transcript\" : \"Show Transcript\"}\n      </button>\n      <button\n        onClick={clearTranscript_func}\n        style={{\n          marginTop: \"10px\",\n          backgroundColor: \"white\",\n          color: \"grey\",\n          border: \"none\",\n          padding: \"10px 20px\",\n          borderRadius: \"5px\",\n          cursor: \"pointer\",\n        }}\n      >\n        Clear Transcript\n      </button>\n    </>\n  );\n};\n\nexport default Dictaphone;","import React from 'react';\n\nconst MediaDisplay = ({ showImage, imageSrc, largeHeight = 100, largeWidth = 100, smallHeight = 40, smallWidth = 40 }) => {\n    // Determine the dimensions based on `showImage` status\n    const height = showImage ? largeHeight : smallHeight;\n    const width = showImage ? largeWidth : smallWidth;\n  \n    return (\n      <div className=\"p-2\" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        {/* Always show the image or video at the top center based on `showImage` */}\n        <div style={{ display: 'flex', justifyContent: 'center', width: '100%' }}>\n          {imageSrc && (\n            imageSrc.toLowerCase().endsWith(\".mp4\") ? (\n              <video\n                style={{ maxWidth: '100%', borderRadius: '8px', objectFit: 'cover' }}\n                height={height}\n                width={width}\n                controls={showImage} // Only show controls if `showImage` is true\n                autoPlay\n                loop={false}\n                muted\n              >\n                <source src={imageSrc} type=\"video/mp4\" />\n                Your browser does not support the video tag.\n              </video>\n            ) : (\n              <img\n                src={imageSrc}\n                height={height}\n                width={width}\n                style={{ maxWidth: '100%', borderRadius: '8px', objectFit: 'cover' }}\n                alt=\"Media Preview\"\n              />\n            )\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  export default MediaDisplay;","import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\n// import { Streamlit } from \"streamlit-component-lib\";\nimport SpeechRecognition from \"react-speech-recognition\";\nimport Dictaphone from \"./Dictaphone\";\nimport MediaDisplay from \"./MediaDisplay\";\n\n// import Dictaphone_ss from \"./Dictaphone_ss\";\n// import * as faceapi from \"@vladmandic/face-api\";\n// import DOMPurify from 'dompurify';\n\nlet timer = null;\nlet faceTimer = null;\nlet g_anwers = [];\nlet firstFace = false;\n\nconst CustomVoiceGPT = (props) => {\n  const { api, kwargs = {} } = props;\n  const {\n    commands,\n    height,\n    width,\n    show_video,\n    input_text,\n    no_response_time,\n    face_recon,\n    api_key,\n    refresh_ask,\n    self_image,\n    api_audio,\n    client_user,\n    force_db_root,\n    before_trigger,\n    agent_actions,\n  } = kwargs;\n  const [imageSrc, setImageSrc] = useState(kwargs.self_image);\n  const [imageSrc_name, setImageSrc_name] = useState(kwargs.self_image);\n\n  const [message, setMessage] = useState(\"\");\n  const [answers, setAnswers] = useState([]);\n  const [listenAfterReply, setListenAfterReply] = useState(false);\n\n  const [modelsLoaded, setModelsLoaded] = useState(false);\n  const [captureVideo, setCaptureVideo] = useState(false);\n  const [textString, setTextString] = useState(\"\");\n  const [apiInProgress, setApiInProgress] = useState(false); // Added state for API in progress\n  const [speaking, setSpeakingInProgress] = useState(false); // Added state for API in progresslistening\n  const [listening, setlistening] = useState(false); // Added state for API in progress\n\n  const [show_conversation, setshow_conversation] = useState(true); // Added state for API in progress\n  \n\n  const [listenButton, setlistenButton] = useState(false); // Added state for API in progress\n  const [session_listen, setsession_listen] = useState(false);\n  const [convo_button, setconvo_button] = useState(false); // Added state for API in progress\n\n  const [before_trigger_vars, before_trigger_] = useState(kwargs.before_trigger); \n  const faceData = useRef([]);\n  const faceTriggered = useRef(false);\n  const videoRef = useRef();\n  const videoHeight = 480;\n  const videoWidth = 640;\n  const canvasRef = useRef();\n  const audioRef = useRef(null);\n  \n\n  const [UserUsedChatWindow, setUserUsedChatWindow] = useState(false);\n  const [buttonName, setButtonName] = useState(\"Click and Ask\");\n  const [buttonName_listen, setButtonName_listen] = useState(\"Listening\");\n\n  const [showImage, setShowImage] = useState(false); // Step 1: Define showImage state\n  const [selectedActions, setSelectedActions] = useState([]);\n\n  \n\n  const toggleShowImage = () => { // Step 2: Create toggle function\n    setShowImage((prevShowImage) => !prevShowImage);\n  };\n\n  const [windowWidth, setWindowWidth] = useState(0); // Initial value\n\n    // Create a reusable function for getting the window width\n    const updateWindowWidth = () => {\n      if (typeof window !== 'undefined') {\n          setWindowWidth(window.innerWidth);\n      }\n  };\n\n  // Call the function on component mount to set the initial window width\n  useEffect(() => {\n      updateWindowWidth();\n  }, []);\n\n  useEffect(() => {\n    if (self_image) {\n      // Fetch the image data from the API endpoint\n      fetchImageData(self_image);\n    }\n  }, [self_image]);\n\n  const fetchImageData = async (imageUrl) => {\n    try {\n      const response = await axios.get(`${api_audio}${imageUrl}`, {\n        responseType: 'blob', // Set responseType to 'blob' to handle file response\n      });\n      const objectUrl = URL.createObjectURL(response.data); // Use a different variable name here\n      setImageSrc(objectUrl);\n      setImageSrc_name(imageUrl)\n    } catch (error) {\n      console.error('Error fetching image data:', error);\n    }\n  };\n\n\n\n  const stopListening = () => {\n    setlistening(false);\n    SpeechRecognition.stopListening();\n    console.log(\"Stopping Listening, isListening=\", listening)\n  }\n\n  const listenContinuously = () =>{\n    setlistening(true)\n    SpeechRecognition.startListening({\n      continuous: true,\n      language: \"en-GB\",\n    })\n\n}\n\n\nconst convo_mode = () => {\n  console.log(\"listening?\", listening);\n  if (!listening) {\n    console.log(\"Starting to listen...\");\n    setconvo_button(true)\n    listenContinuously();\n  } else {\n    console.log(\"Stopping listening...\");\n    setconvo_button(false)\n    stopListening();\n  }\n};\n\nuseEffect(() => {\n  if (listening) {\n    console.log(\"Listening has started\");\n  } else {\n    console.log(\"Listening has stopped\");\n  }\n}, [listening]);\n\n\n  const listenSession = () =>{\n    if (session_listen) {\n    setsession_listen(false)\n  }\n  else{\n    setsession_listen(true)\n  }\n    }\n\n  // useEffect(() => {\n  //   const loadModels = async () => {\n  //     const MODEL_URL = process.env.PUBLIC_URL + \"/models\";\n\n  //     Promise.all([\n  //       faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),\n  //       faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),\n  //       faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL),\n  //       faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL),\n  //       faceapi.nets.ageGenderNet.loadFromUri(MODEL_URL),\n  //     ]).then(() => setModelsLoaded(true));\n  //   };\n  //   loadModels();\n  //   const interval = setInterval(() => {\n  //     // console.log(\"faceData.current :>> \", faceData.current);\n  //   }, 3000);\n  //   return () => clearInterval(interval);\n  // }, []);\n\n\n  const handleInputText = (event) => {\n    // Update the state with the input text\n    setTextString(event.target.value);\n  \n    // Set a variable to indicate that the user used the chat window\n    setUserUsedChatWindow(true);\n  };\n\n  const handleOnKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      console.log(\"textString :>> \", textString);\n      myFunc(textString, { api_body: { keyword: \"\" } }, 4);\n      setTextString(\"\");\n    }\n  };\n\n  // const startVideo = () => {\n  //   setCaptureVideo(true);\n  //   navigator.mediaDevices\n  //     .getUserMedia({ video: { width: 300 } })\n  //     .then((stream) => {\n  //       let video = videoRef.current;\n  //       video.srcObject = stream;\n  //       video.play();\n  //     })\n  //     .catch((err) => {\n  //       console.error(\"error:\", err);\n  //     });\n  // };\n\n  // const handleVideoOnPlay = () => {\n  //   setInterval(async () => {\n  //     if (canvasRef && canvasRef.current) {\n  //       canvasRef.current.innerHTML = faceapi.createCanvasFromMedia(\n  //         videoRef.current\n  //       );\n  //       const displaySize = {\n  //         width: videoWidth,\n  //         height: videoHeight,\n  //       };\n\n  //       faceapi.matchDimensions(canvasRef.current, displaySize);\n\n  //       const detections = await faceapi\n  //         .detectAllFaces(\n  //           videoRef.current,\n  //           new faceapi.TinyFaceDetectorOptions()\n  //         )\n  //         .withFaceLandmarks()\n  //         .withFaceExpressions();\n\n  //       const resizedDetections = faceapi.resizeResults(detections, displaySize);\n\n  //       if (resizedDetections.length > 0) {\n  //         faceData.current = resizedDetections;\n  //         if (!faceTriggered.current && face_recon) {\n  //           myFunc(\"\", { api_body: { keyword: \"\" } }, 2);\n  //           faceTriggered.current = true;\n  //         }\n  //       } else {\n  //         faceTimer && clearTimeout(faceTimer);\n  //         setTimeout(() => {\n  //           faceData.current = [];\n  //         }, 1000);\n  //       }\n\n  //       if (resizedDetections.length > 0 && !firstFace) {\n  //         firstFace = true;\n  //         if (kwargs.hello_audio) {\n  //           const audio = new Audio(kwargs.hello_audio);\n  //           audio.play();\n  //         }\n  //       }\n\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         canvasRef.current\n  //           .getContext(\"2d\")\n  //           .clearRect(0, 0, videoWidth, videoHeight);\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         faceapi.draw.drawDetections(canvasRef.current, resizedDetections);\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         faceapi.draw.drawFaceLandmarks(canvasRef.current, resizedDetections);\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         faceapi.draw.drawFaceExpressions(\n  //           canvasRef.current,\n  //           resizedDetections\n  //         );\n  //     }\n  //   }, 300);\n  // };\n\n  // const closeWebcam = () => {\n  //   videoRef.current.pause();\n  //   videoRef.current.srcObject.getTracks()[0].stop();\n  //   setCaptureVideo(false);\n  // };\n\n  const click_listenButton = () => {\n    setlistenButton(true)\n    if (!listening) {\n      listenContinuously()\n    }\n    setButtonName(\"Please Speak\")\n    console.log(\"listening button listen click\");\n    console.log(listenButton);\n  };\n\n\n  const myFunc = async (ret, command, type) => {\n    setMessage(` (${command[\"api_body\"][\"keyword\"]}) ${ret},`);\n    const text = [...g_anwers, { user: ret }];\n    setAnswers([...text]);\n    try {\n      console.log(\"api call on listen...\", command);\n      setApiInProgress(true); // Set API in progress to true\n      stopListening()\n\n      const body = {\n        tigger_type: type,\n        api_key: api_key,\n        text: text,\n        self_image: imageSrc_name,\n        face_data: faceData.current,\n        refresh_ask: refresh_ask,\n        client_user: client_user,\n        force_db_root:force_db_root,\n        session_listen:session_listen,\n        before_trigger_vars:before_trigger_vars,\n        selected_actions: selectedActions,\n      };\n      console.log(\"api\");\n      const { data } = await axios.post(api, body);\n      console.log(\"data :>> \", data, body);\n      if (data[\"self_image\"] && data[\"self_image\"] !== imageSrc_name) {\n        fetchImageData(data[\"self_image\"]); // Fetch image data if it's different\n      }\n      setAnswers(data[\"text\"]);\n      g_anwers = [...data[\"text\"]];\n      \n      if (audioRef.current) {\n        audioRef.current.pause(); // Pause existing playback if any\n      }\n\n      if (data[\"audio_path\"]) {\n        const apiUrlWithFileName = `${api_audio}${data[\"audio_path\"]}`;\n        audioRef.current = new Audio(apiUrlWithFileName);\n    \n        try {\n            await audioRef.current.play();\n            \n            // Set state to indicate speaking in progress\n            setSpeakingInProgress(true);\n            setButtonName_listen(\"Speaking\");\n    \n            // Await playback completion\n            await new Promise((resolve) => {\n                audioRef.current.onended = () => {\n                    console.log(\"Audio playback finished.\");\n                    resolve();\n                };\n            });\n    \n        } catch (error) {\n            console.error(\"Audio playback error:\", error);\n        } finally {\n            // Cleanup or reset after playback\n            audioRef.current = null;\n            setSpeakingInProgress(false);\n            setButtonName_listen(\"Listen\");\n        }\n    }\n\n      setButtonName(\"Click and Ask\")\n      setButtonName_listen(\"Listening\")\n      setSpeakingInProgress(false)\n      setApiInProgress(false)\n\n      \n      setListenAfterReply(data[\"listen_after_reply\"]);\n      console.log(\"listen after reply\", data[\"listen_after_reply\"], listenAfterReply);\n\n\n\n      if (data[\"page_direct\"] !== false && data[\"page_direct\"] !== null) {\n        console.log(\"api has page direct\", data[\"page_direct\"]);\n        // window.location.reload();\n        window.location.href = data[\"page_direct\"];\n      }\n\n      if (UserUsedChatWindow) {\n        setUserUsedChatWindow(false)\n      }\n      else if (listenAfterReply==true) {\n        console.log(\"API END HIT listenAfterReply==TRUE\")\n        setButtonName_listen(\"Awaiting your Answer please speak\")\n      }\n      else if (listenButton) {\n      setlistenButton(false)\n      }\n      else if (convo_button){\n        console.log(\"convo mode\")\n        listenContinuously()\n      }\n\n      \n    } catch (error) {\n      console.log(\"api call on listen failed!\", error);\n      setApiInProgress(false); // Set API in progress to false on error\n      setlistenButton(false)\n    }\n\n    updateWindowWidth();\n    console.log(\"ReSize Window\")\n  };\n  \n  const background_color_chat = refresh_ask?.color_dict?.background_color_chat || 'transparent';\n  const splitImage = self_image.split('.')[0]; // Split by dot\n  const placeholder = `Chat with ${splitImage}`;\n  console.log(\"session_listen\", session_listen)\n\n\n  return (\n    <>\n\n      <div className=\"p-2\">\n        <div style={{ display: 'flex', flexDirection: 'column', width: '100%' }}>\n          {/* Image or video section */}\n          <div>\n            {/* Media Display */}\n            <MediaDisplay\n              showImage={showImage}\n              imageSrc={imageSrc}\n              largeHeight={100}   // Customize as needed\n              largeWidth={100}    // Customize as needed\n              smallHeight={40}    // Customize as needed\n              smallWidth={40}     // Customize as needed\n            />\n          </div>\n  \n          {/* Chat window, taking full width if no image is shown */}\n          <div style={{ flex: showImage ? 1 : '100%', overflowY: 'auto', maxHeight: '350px' }}>\n            {show_conversation && (\n              <div\n                style={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  maxHeight: '350px',\n                  height: '350px',\n                  overflowY: 'auto',\n                  border: '1px solid #ccc',\n                  padding: '10px',\n                }}\n              >\n                {answers.map((answer, idx) => (\n                  <div\n                    key={idx}\n                    className=\"chat-message-container\"\n                    style={{\n                      marginBottom: '5px',\n                      padding: '5px',\n                      borderRadius: '4px',\n                      border: '1px solid #ccc',\n                      boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n                    }}\n                  >\n                    <div\n                      className=\"chat-user\"\n                      style={{\n                        backgroundColor: '#e4eafe',\n                        textAlign: 'right',\n                        marginLeft: 'auto',\n                        padding: '5px',\n                      }}\n                    >\n                      {client_user}: <span>{answer.user}</span>\n                    </div>\n                    <div\n                      className=\"chat-response-container\"\n                      style={{\n                        display: 'flex',\n                        alignItems: 'flex-start',\n                        backgroundColor: background_color_chat,\n                        padding: '10px',\n                      }}\n                    >\n                      {imageSrc && (\n                        <div className=\"chat-image\" style={{ marginRight: '10px' }}>\n                          <img src={imageSrc} alt=\"response\" style={{ width: '50px' }} />\n                        </div>\n                      )}\n                      <div\n                        className=\"chat-response-text\"\n                        style={{ flex: 1, wordBreak: 'break-word' }}\n                        dangerouslySetInnerHTML={{ __html: answer.resp || \"thinking...\" }}\n                      />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Input text section */}\n        {input_text && (\n          <>\n          <hr style={{ margin: '3px 0' }} />\n            <div className=\"form-group\">\n              <input\n                className=\"form-control\"\n                type=\"text\"\n                placeholder={placeholder}\n                value={textString}\n                onChange={handleInputText}\n                onKeyDown={handleOnKeyDown}\n              />\n\n            </div>\n            <hr style={{ margin: '3px 0' }} />\n          </>\n        )}\n\n\n      {/* Buttons with indicators under each */}\n      <div style={{ display: 'flex', marginTop: '3px' }}>\n        {/* Button 1 with Listen Indicator */}\n        <div style={{ flex: 1, textAlign: 'center' }}>\n          <button\n            style={{\n              fontSize: '12px',\n              padding: '5px',\n              margin: '5px 0',\n              backgroundColor: listenButton ? '#478728': \"rgb(196, 230, 252)\",\n              color: 'black',\n              border: '1px solid #2980b9',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              width: '89%',\n            }}\n            onClick={click_listenButton}\n          >\n            {buttonName}\n          </button>\n\n        </div>\n\n        {/* Button 2 with Conversational Mode Indicator */}\n        <div style={{ flex: 1, textAlign: 'center' }}>\n          <button\n            style={{\n              fontSize: '12px',\n              padding: '5px',\n              margin: '5px 0',\n              backgroundColor: convo_button ? \"rgb(87, 188, 100)\": \"rgb(196, 230, 252)\",\n              color: 'black',\n              border: '1px solid #2980b9',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              width: '89%',\n            }}\n            onClick={convo_mode}\n          >\n            {convo_button ? \"End Conversation\" : \"Start Conversation\"}\n          </button>\n          \n          {listening && (\n                          <div\n                            style={{\n                              width: '89%',\n                              height: '10px',\n                              backgroundImage: 'linear-gradient(90deg, green, transparent 50%, green)',\n                              animation: 'flashLine 1s infinite',\n                              marginTop: '5px',\n                            }}\n                          >\n                            <div style={{ fontSize: '12px', color: 'black' }}>{buttonName_listen}</div>\n                          </div>\n                        )}\n\n          {speaking && (\n            <div\n              style={{\n                // width: '89%',\n                height: '10px',\n                background: 'linear-gradient(to right, blue, transparent, purple)',\n                animation: 'waveAnimation 1s infinite',\n                marginTop: '5px',\n                borderRadius: '10px',\n              }}\n            >\n              <div style={{ fontSize: '12px', color: 'black' }}>Speaking</div>\n            \n            </div>\n          )}\n        </div>\n\n        {/* Button 3 with Session Started Indicator */}\n\n        <div style={{ flex: 1, textAlign: 'center' }}>\n          <button\n            style={{\n              fontSize: '12px',\n              padding: '5px',\n              margin: '5px 0',\n              backgroundColor: session_listen ? \"rgb(250, 234, 131)\": \"rgb(196, 230, 252)\",\n              color: 'black',\n              border: '1px solid #2980b9',\n              borderRadius: '1px',\n              cursor: 'pointer',\n              width: '89%',\n            }}\n            onClick={listenSession}\n          >\n            {session_listen ? \"Stop Session\" : \"Start Session\"}\n          </button>\n          {session_listen && (\n            <div\n              style={{\n                width: '89%',\n                height: '10px',\n                backgroundImage: 'linear-gradient(90deg, orange, transparent 50%, orange)',\n                animation: 'flashLine 1s infinite',\n                marginTop: '5px',\n              }}\n            >\n              <div style={{ fontSize: '12px', color: 'black' }}>Session Started</div>\n            </div>\n          )}\n        </div>\n\n      </div>\n\n    {/* Agent Actions Horizontal Button-Style Multi-Select */}\n    {Array.isArray(agent_actions) && agent_actions.length > 0 && (\n      <div\n        style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          justifyContent: 'center',\n          marginTop: '8px',\n          gap: '6px',\n        }}\n      >\n        {agent_actions.map((action, idx) => {\n          const selected = selectedActions.includes(action);\n          return (\n            <button\n              key={idx}\n              onClick={() => {\n                if (selected) {\n                  setSelectedActions(selectedActions.filter((a) => a !== action));\n                } else {\n                  setSelectedActions([...selectedActions, action]);\n                }\n              }}\n              style={{\n                fontSize: '12px',\n                padding: '5px 10px',\n                backgroundColor: selected ? '#1abc9c' : '#ecf0f1',\n                color: selected ? 'white' : 'black',\n                border: '1px solid #bdc3c7',\n                borderRadius: '4px',\n                cursor: 'pointer',\n              }}\n            >\n              {action}\n            </button>\n          );\n        })}\n      </div>\n    )}\n\n\n        {/* Dictaphone component */}\n        <div className=\"p-2\" style={{ marginBottom: '15px' }}>\n          <Dictaphone\n            commands={commands}\n            myFunc={myFunc}\n            listenAfterReply={listenAfterReply}\n            no_response_time={no_response_time}\n            apiInProgress={apiInProgress}\n            listenButton={listenButton}\n            session_listen={session_listen}\n            listening={listening}\n          />\n        </div>\n  \n\n      </div>\n\n\n\n    </>\n  );\n}\n\nexport default CustomVoiceGPT;\n","import React, { useEffect, useState } from \"react\"\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport VoiceGPT from \"./VoiceGPT.jsx\"\n\nconst Main = (props: ComponentProps) => {\n  const { api, kwargs } = props.args\n  useEffect(() => Streamlit.setFrameHeight())\n  return (\n    <>\n      <VoiceGPT api={api} kwargs={kwargs} />\n    </>\n  )\n}\n\nexport default withStreamlitConnection(Main)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Main from \"./Main\"\n// Lots of import to define a Styletron engine and load the light theme of baseui\nimport { Client as Styletron } from \"styletron-engine-atomic\"\nimport { Provider as StyletronProvider } from \"styletron-react\"\nimport { ThemeProvider, LightTheme } from \"baseui\"\n\nconst engine = new Styletron()\n\n// Wrap your CustomSlider with the baseui them\nReactDOM.render(\n  <React.StrictMode>\n    <StyletronProvider value={engine}>\n      <ThemeProvider theme={LightTheme}>\n        <Main />\n      </ThemeProvider>\n    </StyletronProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}