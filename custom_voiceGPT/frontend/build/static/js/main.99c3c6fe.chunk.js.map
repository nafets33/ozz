{"version":3,"sources":["Dictaphone.jsx","MediaDisplay.jsx","VoiceGPT.jsx","Main.tsx","index.tsx"],"names":["Dictaphone","_ref","commands","myFunc","listenAfterReply","no_response_time","apiInProgress","listenButton","session_listen","initialFinalTranscript","finalTranscript","interimTranscript","resetTranscript","listening","browserSupportsSpeechRecognition","isMicrophoneAvailable","useSpeechRecognition","editableTranscript","setEditableTranscript","useState","show_transcript","setShowTranscript","debouncedTranscript","setDebouncedTranscript","textareaRef","useRef","cursorPosRef","useEffect","prev","trim","processTranscript","api_body","keywordFound","i","length","keywords","j","keyword","RegExp","search","console","log","current","selectionStart","selectionEnd","React","createElement","Fragment","style","display","gap","marginBottom","onClick","backgroundColor","color","border","padding","borderRadius","cursor","fontSize","showTranscript_func","clearTranscript_func","flexDirection","maxHeight","height","overflowY","fontWeight","animation","fontStyle","ref","value","onChange","e","target","width","resize","MediaDisplay","showImage","imageSrc","largeHeight","largeWidth","smallHeight","smallWidth","className","alignItems","justifyContent","toLowerCase","endsWith","maxWidth","objectFit","controls","autoPlay","loop","muted","src","type","alt","g_anwers","CustomVoiceGPT","props","_refresh_ask$color_di","api","kwargs","show_video","input_text","face_recon","api_key","refresh_ask","self_image","api_audio","client_user","force_db_root","before_trigger","agent_actions","setImageSrc","imageSrc_name","setImageSrc_name","message","setMessage","answers","setAnswers","setListenAfterReply","modelsLoaded","setModelsLoaded","captureVideo","setCaptureVideo","textString","setTextString","setApiInProgress","speaking","setSpeakingInProgress","setlistening","show_conversation","setshow_conversation","showTooltip","setShowTooltip","showTooltip_conv","setShowTooltip_conv","setlistenButton","setsession_listen","convo_button","setconvo_button","before_trigger_vars","before_trigger_","faceData","audioRef","UserUsedChatWindow","setUserUsedChatWindow","buttonName","setButtonName","buttonName_listen","setButtonName_listen","setShowImage","selectedActions","setSelectedActions","datatree","setDataTree","datatreeTitle","setDataTreeTitle","datatree_title","selectedNodes","setSelectedNodes","collapsed","setCollapsed","windowWidth","setWindowWidth","updateWindowWidth","window","innerWidth","fetchImageData","async","response","axios","get","imageUrl","responseType","objectUrl","URL","createObjectURL","data","error","listenContinuously","SpeechRecognition","startListening","continuous","language","isMobile","setIsMobile","checkMobile","test","navigator","userAgent","editingDataframe","setEditingDataframe","editedDataframe","setEditedDataframe","ret","command","text","user","dataframe","body","tigger_type","face_data","selected_actions","selected_nodes","post","pause","apiUrlWithFileName","Audio","play","Promise","resolve","onended","location","href","stopListening","findNodeByKey","tree","key","k","Object","entries","children","found","background_color_chat","color_dict","placeholder","split","firstKey","nodeObj","nodeTitle","field_name","nodeLink","hyperlink","showSidebar","setShowSidebar","sidebarWide","setSidebarWide","minHeight","flexShrink","marginRight","background","boxShadow","outline","transition","aria-label","margin","alignSelf","borderRight","onSelectionChange","renderNodes","level","arguments","undefined","parentKeys","Array","isArray","map","_ref2","idx","nodePath","join","hasChildren","keys","isCollapsed","isLast","marginLeft","position","whiteSpace","fontFamily","paddingTop","paddingBottom","left","top","zIndex","bottom","[object Object]","toggleCollapse","lineHeight","userSelect","tabIndex","checked","includes","newSelected","filter","handleSelect","rel","textDecoration","overflow","textOverflow","verticalAlign","title","flex","minWidth","marginTop","slice","node","answer","textAlign","wordBreak","resp","dangerouslySetInnerHTML","__html","event","onKeyDown","borderCollapse","col","row","rowIdx","newDF","r","flexWrap","click_listenButton","role","onMouseEnter","onMouseLeave","transform","pointerEvents","listenSession","action","selected","a","withStreamlitConnection","args","Streamlit","setFrameHeight","VoiceGPT","engine","Styletron","ReactDOM","render","StrictMode","StyletronProvider","ThemeProvider","theme","LightTheme","Main","document","getElementById"],"mappings":"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","file":"static/js/main.99c3c6fe.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\n\nconst Dictaphone = ({\n  commands,\n  myFunc,\n  listenAfterReply = false,\n  no_response_time = 3,\n  apiInProgress = false,\n  listenButton = false,\n  session_listen = false,\n  initialFinalTranscript = \"\",\n}) => {\n  const {\n    finalTranscript,\n    interimTranscript,\n    resetTranscript,\n    listening,\n    browserSupportsSpeechRecognition,\n    isMicrophoneAvailable,\n  } = useSpeechRecognition();\n\n  const [editableTranscript, setEditableTranscript] = useState(\"\"); // State for editable transcript\n  const [show_transcript, setShowTranscript] = useState(true);\n  const [debouncedTranscript, setDebouncedTranscript] = useState(\"\");\n\n  const showTranscript_func = () => setShowTranscript((prev) => !prev);\n  const clearTranscript_func = () => {\n    resetTranscript();\n    setEditableTranscript(\"\"); // Clear editable transcript\n  };\n  \n  const textareaRef = useRef(null);\n  const cursorPosRef = useRef(null);\n  // Logic to process transcript based on session_listen\n  const processTranscript = () => {\n    if (finalTranscript !== \"\") {\n\n      if (listenButton) {\n        // When session_listen is false and not using listenButton, just append\n        myFunc(finalTranscript, { api_body: {} }, 8);\n        setEditableTranscript((prev) => `${prev} ${finalTranscript}`.trim());\n        resetTranscript();\n        setEditableTranscript(\"\"); // Clear editable transcript state\n        return;\n      }\n\n\n      if (session_listen) {\n        // Check for keywords only when session_listen is true\n        let keywordFound = false;\n        for (let i = 0; i < commands.length; i++) {\n          const { keywords, api_body } = commands[i];\n          for (let j = 0; j < keywords.length; j++) {\n            const keyword = new RegExp(keywords[j], \"i\");\n            const isKeywordFound = finalTranscript.search(keyword) !== -1;\n  \n            if (isKeywordFound && !apiInProgress) {\n              console.log(`Keyword found: ${keywords[j]}`);\n              myFunc(finalTranscript, commands[i], 1);\n              resetTranscript(); // Reset transcript after processing keyword\n              // setEditableTranscript(\"\"); // Clear editable transcript state\n              keywordFound = true;\n              return;\n            }\n          }\n        }\n  \n        if (!keywordFound) {\n          // Append transcript if no keyword is found\n          setEditableTranscript((prev) => `${prev} ${finalTranscript}`.trim());\n          resetTranscript(); // Clear finalTranscript after appending\n        }\n      } else {\n        // When session_listen is false, focus on capturing speech-to-text\n        if (textareaRef.current) {\n          cursorPosRef.current = textareaRef.current.selectionStart;\n        }\n\n        console.log(\"Recording speech-to-text without keyword triggers\");\n        setEditableTranscript((prev) => `${prev} ${finalTranscript}`.trim());\n        resetTranscript(); // Clear finalTranscript after appending\n      }\n    }\n  };\n\n    useEffect(() => {\n    if (initialFinalTranscript) setEditableTranscript((prev) => `${prev} ${initialFinalTranscript}`.trim());\n  }, []);\n  \n  // Use processTranscript in useEffect to handle updates\n  useEffect(() => {\n    processTranscript();\n  }, [finalTranscript]);\n\n  const handleTranscriptChange = (e) => {\n    setEditableTranscript(e.target.value); // Update editable transcript based on user input\n  };\n\n  useEffect(() => {\n    if (textareaRef.current && cursorPosRef.current !== null) {\n      textareaRef.current.selectionStart = cursorPosRef.current;\n      textareaRef.current.selectionEnd = cursorPosRef.current;\n      cursorPosRef.current = null;\n    }\n    }, [editableTranscript]);\n\n\n  if (!browserSupportsSpeechRecognition) {\n    return <span>No browser support</span>;\n  }\n\n  if (!isMicrophoneAvailable) {\n    return <span>Please allow access to the microphone</span>;\n  }\n\n  return (\n    <>\n      <div style={{ display: \"flex\", gap: \"10px\", marginBottom: \"10px\" }}>\n        <button\n          onClick={() => {\n            myFunc(editableTranscript, { api_body: {} }, 5);\n            resetTranscript();\n            setEditableTranscript(\"\");\n            }}\n            style={{\n            backgroundColor: \"rgb(196, 230, 252)\",\n            color: \"black\",\n            border: \"none\",\n            padding: \"5px 10px\",\n            borderRadius: \"3px\",\n            cursor: \"pointer\",\n            fontSize: \"0.9em\",\n            }}\n          >\n            Send Transcript\n          </button>\n          <button\n            onClick={showTranscript_func}\n            style={{\n            backgroundColor: \"white\",\n            color: \"grey\",\n            border: \"none\",\n            padding: \"5px 10px\",\n            borderRadius: \"3px\",\n            cursor: \"pointer\",\n            fontSize: \"0.9em\",\n            }}\n          >\n            {show_transcript ? \"Hide Transcript\" : \"Show Transcript\"}\n          </button>\n          <button\n            onClick={clearTranscript_func}\n            style={{\n            backgroundColor: \"white\",\n            color: \"grey\",\n            border: \"none\",\n            padding: \"5px 10px\",\n            borderRadius: \"3px\",\n            cursor: \"pointer\",\n            fontSize: \"0.9em\",\n            }}\n          >\n            Clear Transcript\n          </button>\n          </div>\n          {show_transcript && (\n          <div\n            style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            maxHeight: \"800px\",\n            height: \"550px\",\n            overflowY: \"auto\",\n            border: \"1px solid #ccc\",\n            padding: \"10px\",\n            }}\n          >\n<span>\n  <strong>Listening:</strong>{\" \"}\n  <span\n    style={{\n      color: listening ? \"green\" : \"gray\",\n      fontWeight: 600,\n      animation: listening ? \"flash-green 1s infinite alternate\" : \"none\",\n    }}\n  >\n    {listening ? \"ON\" : \"OFF\"}\n  </span>\n  {/* Add the animation style only once in your component */}\n  <style>\n    {`\n      @keyframes flash-green {\n        0% { opacity: 1; }\n        100% { opacity: 0.4; }\n      }\n    `}\n  </style>\n</span>         \n            \n            <span>\n            <strong>Transcript:</strong>\n            </span>\n          {/* Live preview of interim transcript */}\n            {interimTranscript && (\n              <div style={{ color: \"#888\", fontStyle: \"italic\", marginBottom: \"8px\" }}>\n                {interimTranscript}\n              </div>\n            )}\n          <textarea\n            ref={textareaRef}\n            value={editableTranscript}\n            onChange={handleTranscriptChange}\n            style={{\n              backgroundColor: \"rgb(255, 255, 255)\",\n              color: \"black\",\n              width: \"100%\",\n              height: \"550px\",\n              border: \"1px solid #ccc\",\n              padding: \"5px\",\n              resize: \"none\",\n            }}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Dictaphone;","import React from 'react';\n\nconst MediaDisplay = ({ showImage, imageSrc, largeHeight = 100, largeWidth = 100, smallHeight = 40, smallWidth = 40 }) => {\n    // Determine the dimensions based on `showImage` status\n    const height = showImage ? largeHeight : smallHeight;\n    const width = showImage ? largeWidth : smallWidth;\n  \n    return (\n      <div className=\"p-2\" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        {/* Always show the image or video at the top center based on `showImage` */}\n        <div style={{ display: 'flex', justifyContent: 'center', width: '100%' }}>\n          {imageSrc && (\n            imageSrc.toLowerCase().endsWith(\".mp4\") ? (\n              <video\n                style={{ maxWidth: '100%', borderRadius: '8px', objectFit: 'cover' }}\n                height={height}\n                width={width}\n                controls={showImage} // Only show controls if `showImage` is true\n                autoPlay\n                loop={false}\n                muted\n              >\n                <source src={imageSrc} type=\"video/mp4\" />\n                Your browser does not support the video tag.\n              </video>\n            ) : (\n              <img\n                src={imageSrc}\n                height={height}\n                width={width}\n                style={{ maxWidth: '100%', borderRadius: '8px', objectFit: 'cover' }}\n                alt=\"Media Preview\"\n              />\n            )\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  export default MediaDisplay;","import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\n// import { Streamlit } from \"streamlit-component-lib\";\nimport SpeechRecognition from \"react-speech-recognition\";\nimport Dictaphone from \"./Dictaphone\";\nimport MediaDisplay from \"./MediaDisplay\";\nimport './spinner.css';\n\n\nlet timer = null;\nlet faceTimer = null;\nlet g_anwers = [];\nlet firstFace = false;\n\nconst CustomVoiceGPT = (props) => {\n  const { api, kwargs = {} } = props;\n  const {\n    commands,\n    height,\n    width,\n    show_video,\n    input_text,\n    no_response_time,\n    face_recon,\n    api_key,\n    refresh_ask,\n    self_image,\n    api_audio,\n    client_user,\n    force_db_root,\n    before_trigger,\n    agent_actions,\n  } = kwargs;\n\n  const [imageSrc, setImageSrc] = useState(kwargs.self_image);\n  const [imageSrc_name, setImageSrc_name] = useState(kwargs.self_image);\n\n  const [message, setMessage] = useState(\"\");\n  const [answers, setAnswers] = useState([]);\n  const [listenAfterReply, setListenAfterReply] = useState(false);\n\n  const [modelsLoaded, setModelsLoaded] = useState(false);\n  const [captureVideo, setCaptureVideo] = useState(false);\n  const [textString, setTextString] = useState(\"\");\n  const [apiInProgress, setApiInProgress] = useState(false); // Added state for API in progress\n  const [speaking, setSpeakingInProgress] = useState(false); // Added state for API in progresslistening\n  const [listening, setlistening] = useState(false); // Added state for API in progress\n\n  const [show_conversation, setshow_conversation] = useState(true); // Added state for API in progress\n  // Inside your component:\nconst [showTooltip, setShowTooltip] = useState(false);\nconst [showTooltip_conv, setShowTooltip_conv] = useState(false);\n  const [listenButton, setlistenButton] = useState(false); // Added state for API in progress\n  const [session_listen, setsession_listen] = useState(false);\n  const [convo_button, setconvo_button] = useState(false); // Added state for API in progress\n\n  const [before_trigger_vars, before_trigger_] = useState(kwargs.before_trigger); \n  const faceData = useRef([]);\n  const faceTriggered = useRef(false);\n  const videoRef = useRef();\n  const videoHeight = 480;\n  const videoWidth = 640;\n  const canvasRef = useRef();\n  const audioRef = useRef(null);\n  \n\n  const [UserUsedChatWindow, setUserUsedChatWindow] = useState(false);\n  const [buttonName, setButtonName] = useState(\"Click and Ask\");\n  const [buttonName_listen, setButtonName_listen] = useState(\"Listening\");\n\n  const [showImage, setShowImage] = useState(false); // Step 1: Define showImage state\n  const [selectedActions, setSelectedActions] = useState([]);\n  const [datatree, setDataTree] = useState(kwargs.datatree || {});\n  const [datatreeTitle, setDataTreeTitle] = useState(kwargs.datatree_title || \"\");\n\nuseEffect(() => {\n  if (kwargs.answers) {\n    setAnswers(kwargs.answers);\n  }\n}, [kwargs.answers]);\n\nconst [selectedNodes, setSelectedNodes] = useState([]);\n\n// SidebarTree with collapsible nodes, no text wrapping, and improved style\n// Move collapsed and setCollapsed state up to the parent component\nconst [collapsed, setCollapsed] = useState({});\n\nconst SidebarTree = ({ datatree = {}, onSelectionChange, collapsed, setCollapsed }) => {\n  // Remove local collapsed state from SidebarTree\n\n  const handleSelect = (key) => {\n    let newSelected;\n    if (selectedNodes.includes(key)) {\n      newSelected = selectedNodes.filter((k) => k !== key);\n    } else {\n      newSelected = [...selectedNodes, key];\n    }\n    if (onSelectionChange) onSelectionChange(newSelected);\n  };\n\n  // Use a unique path for each node\n  const toggleCollapse = (nodePath) => {\n    setCollapsed((prev) => ({\n      ...prev,\n      [nodePath]: prev[nodePath] === undefined ? false : !prev[nodePath],\n    }));\n  };\n\n  const renderNodes = (tree, level = 1, parentKeys = []) => {\n    if (!tree || typeof tree !== \"object\" || Array.isArray(tree)) return null;\n    const entries = Object.entries(tree);\n    return entries.map(([key, value], idx) => {\n      const nodePath = [...parentKeys, key].join(\"/\"); // Unique path for each node\n      const hasChildren =\n        value.children &&\n        typeof value.children === \"object\" &&\n        !Array.isArray(value.children) &&\n        Object.keys(value.children).length > 0;\n      const isCollapsed = collapsed[nodePath] !== undefined ? collapsed[nodePath] : true;\n      const isLast = idx === entries.length - 1;\n\n      return (\n        <div\n          key={nodePath}\n          style={{\n            marginLeft: level * 14,\n            position: \"relative\",\n            whiteSpace: \"nowrap\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n            fontSize: \"14px\",\n            fontFamily: \"inherit\",\n            marginBottom: \"2px\",\n            paddingTop: \"4px\",\n            paddingBottom: \"4px\",\n          }}\n        >\n          {level > 0 && (\n            <div\n              style={{\n                position: \"absolute\",\n                left: -5,\n                top: 0,\n                height: \"100%\",\n                width: 16,\n                zIndex: 0,\n              }}\n            >\n              <div\n                style={{\n                  position: \"absolute\",\n                  left: -5,\n                  top: 0,\n                  bottom: isLast ? \"50%\" : 0,\n                  width: 2,\n                  background: \"#bbb\",\n                  height: hasChildren && !isCollapsed ? \"50%\" : \"100%\",\n                }}\n              />\n              <div\n                style={{\n                  position: \"absolute\",\n                  left: 7,\n                  top: 12,\n                  width: 9,\n                  height: 2,\n                  background: \"#bbb\",\n                }}\n              />\n            </div>\n          )}\n          <div style={{ display: \"flex\", alignItems: \"center\", position: \"relative\", zIndex: 1 }}>\n            {hasChildren && (\n              <button\n                onClick={() => toggleCollapse(nodePath)}\n                style={{\n                  border: \"none\",\n                  background: \"transparent\",\n                  cursor: \"pointer\",\n                  fontSize: \"14px\",\n                  marginRight: \"4px\",\n                  padding: 0,\n                  width: \"18px\",\n                  height: \"18px\",\n                  lineHeight: \"18px\",\n                  userSelect: \"none\",\n                }}\n                aria-label={isCollapsed ? \"Expand\" : \"Collapse\"}\n                tabIndex={-1}\n              >\n                {isCollapsed ? \"▶\" : \"▼\"}\n              </button>\n            )}\n            <input\n              type=\"checkbox\"\n              checked={selectedNodes.includes(key)}\n              onChange={() => handleSelect(key)}\n              style={{ marginRight: \"10px\" }}\n            />\n            {value.hyperlink ? (\n              <a\n                href={value.hyperlink}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                style={{\n                  textDecoration: \"none\",\n                  color: \"#2980b9\",\n                  fontWeight: 500,\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                  whiteSpace: \"nowrap\",\n                  maxWidth: \"100%\",\n                  display: \"inline-block\",\n                  verticalAlign: \"middle\",\n                }}\n                title={value.field_name}\n              >\n                {value.field_name}\n              </a>\n            ) : (\n              <span\n                style={{\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                  whiteSpace: \"nowrap\",\n                  maxWidth: \"160px\",\n                  display: \"inline-block\",\n                  verticalAlign: \"middle\",\n                }}\n                title={value.field_name}\n              >\n                {value.field_name}\n              </span>\n            )}\n          </div>\n          {hasChildren && !isCollapsed && (\n            <div style={{ width: \"100%\" }}>\n              {renderNodes(value.children, level + 1, [...parentKeys, key])}\n            </div>\n          )}\n        </div>\n      );\n    });\n  };\n\n  if (!datatreeTitle || !datatree) return null;\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        padding: 10,\n        maxHeight: 800,\n        overflowY: \"auto\",\n        background: \"transparent\",\n      }}\n    >\n      <h4 style={{ margin: \"0 0 8px 0\", fontWeight: 600 }}>{datatreeTitle}</h4>\n      <div>{renderNodes(datatree)}</div>\n    </div>\n  );\n};\n\n  const [windowWidth, setWindowWidth] = useState(0); // Initial value\n\n    // Create a reusable function for getting the window width\n    const updateWindowWidth = () => {\n      if (typeof window !== 'undefined') {\n          setWindowWidth(window.innerWidth);\n      }\n  };\n\n  // Call the function on component mount to set the initial window width\n  useEffect(() => {\n      updateWindowWidth();\n  }, []);\n\n  useEffect(() => {\n    if (self_image) {\n      // Fetch the image data from the API endpoint\n      fetchImageData(self_image);\n    }\n  }, [self_image]);\n\n  const fetchImageData = async (imageUrl) => {\n    try {\n      const response = await axios.get(`${api_audio}${imageUrl}`, {\n        responseType: 'blob', // Set responseType to 'blob' to handle file response\n      });\n      const objectUrl = URL.createObjectURL(response.data); // Use a different variable name here\n      setImageSrc(objectUrl);\n      setImageSrc_name(imageUrl)\n    } catch (error) {\n      console.error('Error fetching image data:', error);\n    }\n  };\n\n\n\n  const listenContinuously = async () =>{\n    setlistening(true)\n    SpeechRecognition.startListening({\n      continuous: true,\n      language: \"en-US\",\n    })\n\n}\nconst [isMobile, setIsMobile] = useState(false);\nuseEffect(() => {\n  const checkMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n  setIsMobile(checkMobile);\n}, []);\n\n// Update convo_mode function:\nconst convo_mode = async () => {\n  console.log(\"convo_mode - listening?\", listening, \"isMobile:\", isMobile, \"convo_button:\", convo_button);\n  \n  if (!convo_button) {\n    console.log(\"Starting continuous listening...\");\n    setconvo_button(true);\n    listenContinuously();\n  } else {\n    console.log(\"Stopping continuous listening...\");\n    setconvo_button(false);\n    setlistening(false);\n    SpeechRecognition.stopListening();\n  }\n};\n\n// Also update your stopListening function to properly sync the states:\nconst stopListening = () => {\n  setlistening(false);\n  setconvo_button(false); // Add this line to sync the states\n  SpeechRecognition.stopListening();\n  console.log(\"Stopping Listening, isListening=\", listening);\n};\n\n\n  const listenSession = () =>{\n    if (session_listen) {\n    setsession_listen(false)\n  }\n  else{\n    setsession_listen(true)\n  }\n    }\n\n  // useEffect(() => {\n  //   const loadModels = async () => {\n  //     const MODEL_URL = process.env.PUBLIC_URL + \"/models\";\n\n  //     Promise.all([\n  //       faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),\n  //       faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),\n  //       faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL),\n  //       faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL),\n  //       faceapi.nets.ageGenderNet.loadFromUri(MODEL_URL),\n  //     ]).then(() => setModelsLoaded(true));\n  //   };\n  //   loadModels();\n  //   const interval = setInterval(() => {\n  //     // console.log(\"faceData.current :>> \", faceData.current);\n  //   }, 3000);\n  //   return () => clearInterval(interval);\n  // }, []);\n\n\n  const handleInputText = (event) => {\n    // Update the state with the input text\n    setTextString(event.target.value);\n  \n    // Set a variable to indicate that the user used the chat window\n    setUserUsedChatWindow(true);\n  };\n\n  const handleOnKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      console.log(\"textString :>> \", textString);\n      myFunc(textString, { api_body: { keyword: \"\" } }, 4);\n      setTextString(\"\");\n    }\n  };\n\n  // const startVideo = () => {\n  //   setCaptureVideo(true);\n  //   navigator.mediaDevices\n  //     .getUserMedia({ video: { width: 300 } })\n  //     .then((stream) => {\n  //       let video = videoRef.current;\n  //       video.srcObject = stream;\n  //       video.play();\n  //     })\n  //     .catch((err) => {\n  //       console.error(\"error:\", err);\n  //     });\n  // };\n\n  // const handleVideoOnPlay = () => {\n  //   setInterval(async () => {\n  //     if (canvasRef && canvasRef.current) {\n  //       canvasRef.current.innerHTML = faceapi.createCanvasFromMedia(\n  //         videoRef.current\n  //       );\n  //       const displaySize = {\n  //         width: videoWidth,\n  //         height: videoHeight,\n  //       };\n\n  //       faceapi.matchDimensions(canvasRef.current, displaySize);\n\n  //       const detections = await faceapi\n  //         .detectAllFaces(\n  //           videoRef.current,\n  //           new faceapi.TinyFaceDetectorOptions()\n  //         )\n  //         .withFaceLandmarks()\n  //         .withFaceExpressions();\n\n  //       const resizedDetections = faceapi.resizeResults(detections, displaySize);\n\n  //       if (resizedDetections.length > 0) {\n  //         faceData.current = resizedDetections;\n  //         if (!faceTriggered.current && face_recon) {\n  //           myFunc(\"\", { api_body: { keyword: \"\" } }, 2);\n  //           faceTriggered.current = true;\n  //         }\n  //       } else {\n  //         faceTimer && clearTimeout(faceTimer);\n  //         setTimeout(() => {\n  //           faceData.current = [];\n  //         }, 1000);\n  //       }\n\n  //       if (resizedDetections.length > 0 && !firstFace) {\n  //         firstFace = true;\n  //         if (kwargs.hello_audio) {\n  //           const audio = new Audio(kwargs.hello_audio);\n  //           audio.play();\n  //         }\n  //       }\n\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         canvasRef.current\n  //           .getContext(\"2d\")\n  //           .clearRect(0, 0, videoWidth, videoHeight);\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         faceapi.draw.drawDetections(canvasRef.current, resizedDetections);\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         faceapi.draw.drawFaceLandmarks(canvasRef.current, resizedDetections);\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         faceapi.draw.drawFaceExpressions(\n  //           canvasRef.current,\n  //           resizedDetections\n  //         );\n  //     }\n  //   }, 300);\n  // };\n\n  // const closeWebcam = () => {\n  //   videoRef.current.pause();\n  //   videoRef.current.srcObject.getTracks()[0].stop();\n  //   setCaptureVideo(false);\n  // };\n\n  const click_listenButton = () => {\n    setlistenButton(true)\n    if (!listening) {\n      listenContinuously()\n    }\n    setButtonName(\"Please Speak\")\n    console.log(\"listening button listen click\");\n    console.log(listenButton);\n  };\n  const [editingDataframe, setEditingDataframe] = useState(null);\n  const [editedDataframe, setEditedDataframe] = useState(null);\n\n  const myFunc = async (ret, command, type) => {\n    setMessage(` (${command[\"api_body\"][\"keyword\"]}) ${ret},`);\n    const text = [...g_anwers, { user: ret }];\n    setAnswers([...text]);\n    try {\n      console.log(\"api call on listen...\", command);\n      console.log(\"selected_nodes\", selectedNodes);\n      setApiInProgress(true); // Set API in progress to true\n      // stopListening()\n      // how do I get the dataframe from type?\n      let dataframe = null;\n      if (type === \"dataframe_edit\" && command.api_body && command.api_body.dataframe) {\n        dataframe = command.api_body.dataframe;\n      }\n      const body = {\n        tigger_type: type,\n        api_key: api_key,\n        text: text,\n        self_image: imageSrc_name,\n        face_data: faceData.current,\n        refresh_ask: refresh_ask,\n        client_user: client_user,\n        force_db_root:force_db_root,\n        session_listen:session_listen,\n        before_trigger_vars:before_trigger_vars,\n        selected_actions: selectedActions,\n        selected_nodes: selectedNodes,\n        dataframe: dataframe,\n      };\n      console.log(\"api\");\n      const { data } = await axios.post(api, body);\n      console.log(\"data :>> \", data, body);\n      if (data[\"self_image\"] && data[\"self_image\"] !== imageSrc_name) {\n        fetchImageData(data[\"self_image\"]); // Fetch image data if it's different\n      }\n      \n      if (data[\"text\"]) {\n        setAnswers(data[\"text\"]);\n        g_anwers = [...data[\"text\"]];\n      }\n      \n      if (audioRef.current) {\n        audioRef.current.pause(); // Pause existing playback if any\n      }\n\n      if (data[\"audio_path\"]) {\n        const apiUrlWithFileName = `${api_audio}${data[\"audio_path\"]}`;\n        audioRef.current = new Audio(apiUrlWithFileName);\n    \n        try {\n            await audioRef.current.play();\n            \n            // Set state to indicate speaking in progress\n            setSpeakingInProgress(true);\n            setButtonName_listen(\"Speaking\");\n    \n            // Await playback completion\n            await new Promise((resolve) => {\n                audioRef.current.onended = () => {\n                    console.log(\"Audio playback finished.\");\n                    resolve();\n                };\n            });\n    \n        } catch (error) {\n            console.error(\"Audio playback error:\", error);\n        } finally {\n            // Cleanup or reset after playback\n            audioRef.current = null;\n            setSpeakingInProgress(false);\n            setButtonName_listen(\"Listen\");\n        }\n    }\n\n      setButtonName(\"Click and Ask\")\n      setButtonName_listen(\"Listening\")\n      setSpeakingInProgress(false)\n      setApiInProgress(false)\n      setListenAfterReply(data[\"listen_after_reply\"]);\n      \n      console.log(\"listen after reply\", data[\"listen_after_reply\"], listenAfterReply);\n\n      if (data[\"page_direct\"] !== false && data[\"page_direct\"] !== null) {\n        console.log(\"api has page direct\", data[\"page_direct\"]);\n        // window.location.reload();\n        window.location.href = data[\"page_direct\"];\n      }\n\n      if (UserUsedChatWindow) {\n        setUserUsedChatWindow(false)\n      }\n      else if (listenAfterReply==true) {\n        console.log(\"API END HIT listenAfterReply==TRUE\")\n        setButtonName_listen(\"Awaiting your Answer please speak\")\n      }\n      else if (listenButton) {\n      setlistenButton(false)\n      stopListening()\n      }\n      else if (convo_button){\n        console.log(\"convo mode\")\n        // listenContinuously()\n      }\n\n      if (data[\"dataframe\"]) {\n        setEditingDataframe(data[\"dataframe\"]);\n        setEditedDataframe(data[\"dataframe\"]);\n        return; // Exit further processing if you want\n}\n\n      \n    } catch (error) {\n      console.log(\"api call on listen failed!\", error);\n      setApiInProgress(false); // Set API in progress to false on error\n      setlistenButton(false)\n    }\n\n    updateWindowWidth();\n    console.log(\"ReSize Window\")\n  };\n\n// Recursive function to find a node by key in the datatree\nfunction findNodeByKey(tree, key) {\n  if (!tree || typeof tree !== \"object\") return null;\n  for (const [k, value] of Object.entries(tree)) {\n    if (k === key) return value;\n    if (value.children) {\n      const found = findNodeByKey(value.children, key);\n      if (found) return found;\n    }\n  }\n  return null;\n}\n\n  const background_color_chat = refresh_ask?.color_dict?.background_color_chat || 'transparent';\n  const splitImage = self_image.split('.')[0]; // Split by dot\n  const placeholder = `Chat with ${splitImage}`;\n  console.log(\"session_listen\", session_listen)\n  console.log(\"selectedNodes\", selectedNodes)\n  const firstKey = selectedNodes[0] || null;\n  const nodeObj = firstKey ? findNodeByKey(datatree, firstKey) : null;\n  const nodeTitle = nodeObj?.field_name;\n  const nodeLink = nodeObj?.hyperlink;\n\n//     console.log(\"selectedNodes\", selectedNodes)\n// };\n\n  const [showSidebar, setShowSidebar] = useState(false);\n  const [sidebarWide, setSidebarWide] = useState(450);\n\nreturn (\n  <div style={{ display: \"flex\", width: \"100%\", minHeight: \"100vh\" }}>\n    {/* Sidebar Toggle and Sidebar - Only show if not mobile or if sidebar is open */}\n    {(!isMobile || showSidebar) && (\n      <div style={{ display: \"flex\", flexDirection: \"column\", flexShrink: 0 }}>\n        {/* Sidebar Toggle Button */}\n        <div style={{ display: \"flex\", alignItems: \"center\", padding: isMobile ? \"2px 4px\" : \"4px 8px\" }}>\n          <button\n            onClick={() => setShowSidebar((prev) => !prev)}\n            style={{\n              fontSize: isMobile ? \"16px\" : \"18px\",\n              padding: isMobile ? \"2px 8px\" : \"4px 10px\",\n              marginRight: isMobile ? \"3px\" : \"6px\",\n              border: \"none\",\n              borderRadius: \"50%\",\n              background: \"transparent\",\n              color: \"#2980b9\",\n              cursor: \"pointer\",\n              height: isMobile ? \"28px\" : \"32px\",\n              width: isMobile ? \"28px\" : \"32px\",\n              boxShadow: \"none\",\n              outline: \"none\",\n              transition: \"background 0.2s\",\n            }}\n            aria-label={showSidebar ? \"Hide Sidebar\" : \"Show Sidebar\"}\n          >\n            {showSidebar ? \"⏴\" : \"⏵\"}\n          </button>\n        </div>\n        \n        {/* Sidebar Width Toggle Button (only visible when sidebar is open) */}\n        {showSidebar && !isMobile && (\n          <button\n            onClick={() => setSidebarWide((prev) => (prev === 450 ? 250 : 450))}\n            style={{\n              border: \"transparent\",\n              background: \"transparent\",\n              cursor: \"pointer\",\n              height: \"32px\",\n              margin: \"6px 0 0 0\",\n              width: \"32px\",\n              alignSelf: \"flex-end\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              borderRadius: \"50%\",\n              boxShadow: \"none\",\n              transition: \"background 0.2s\",\n            }}\n          >\n            {sidebarWide === 450 ? <span>⏪</span> : <span>⏩</span>}\n          </button>\n        )}\n        \n        {/* Sidebar Tree */}\n        {showSidebar && (\n          <div \n            style={{ \n              width: isMobile ? \"280px\" : sidebarWide, \n              borderRight: \"1px solid #ccc\", \n              padding: isMobile ? 5 : 10, \n              transition: \"width 0.2s\",\n              maxHeight: isMobile ? \"50vh\" : \"none\",\n              overflowY: isMobile ? \"auto\" : \"visible\"\n            }}\n          >\n            <SidebarTree\n              datatree={datatree}\n              onSelectionChange={setSelectedNodes}\n              collapsed={collapsed}\n              setCollapsed={setCollapsed}\n            />          \n          </div>\n        )}\n      </div>\n    )}\n\n    {/* Main Content */}\n    <div \n      style={{ \n        flex: 1, \n        padding: isMobile ? \"4px\" : \"8px\", // Reduce padding on mobile\n        minWidth: 0 // Prevent flex item from overflowing\n      }}\n    >\n      {/* Mobile-only sidebar toggle when sidebar is hidden */}\n      {isMobile && !showSidebar && (\n        <div style={{ marginBottom: \"8px\" }}>\n          <button\n            onClick={() => setShowSidebar(true)}\n            style={{\n              fontSize: \"16px\",\n              padding: \"4px 8px\",\n              border: \"1px solid #2980b9\",\n              borderRadius: \"4px\",\n              background: \"transparent\",\n              color: \"#2980b9\",\n              cursor: \"pointer\",\n            }}\n          >\n            {showSidebar ? \"⏴\" : \"⏵\"}\n          </button>\n        </div>\n      )}\n\n      <div>\n        {firstKey && nodeObj ? (\n          <div style={{ fontSize: isMobile ? \"14px\" : \"16px\", marginBottom: \"8px\" }}>\n            Working Page:{\" \"}\n            {nodeLink ? (\n              <a href={nodeLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                {nodeTitle}\n              </a>\n            ) : (\n              nodeTitle\n            )}\n          </div>\n        ) : (\n          <div></div>\n        )}\n\n        {/* Show other selected nodes, if any */}\n        {selectedNodes.length > 1 && (\n          <div style={{ marginTop: 8, fontSize: isMobile ? \"12px\" : \"14px\" }}>\n            <strong>Extra Context:</strong>{\" \"}\n            {selectedNodes.slice(1).map((key, idx) => {\n              const node = findNodeByKey(datatree, key);\n              return (\n                <span key={key} style={{ marginRight: 8 }}>\n                  {node?.field_name || key}\n                  {idx < selectedNodes.length - 2 ? \",\" : \"\"}\n                </span>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n      {/* Rest of your content stays the same but with mobile padding adjustments */}\n      <div style={{ display: 'flex', flexDirection: 'column', width: '100%' }}>\n        {/* Media Display */}\n        <div>\n          <MediaDisplay\n            showImage={showImage}\n            imageSrc={imageSrc}\n            largeHeight={isMobile ? 80 : 100}\n            largeWidth={isMobile ? 80 : 100}\n            smallHeight={isMobile ? 30 : 40}\n            smallWidth={isMobile ? 30 : 40}\n          />\n        </div>\n\n        {/* Chat window */}\n        <div style={{ \n          flex: showImage ? 1 : '100%', \n          overflowY: 'auto', \n          maxHeight: isMobile ? '300px' : '450px' \n        }}>\n          {show_conversation && (\n            <div\n              style={{\n                display: 'flex',\n                flexDirection: 'column',\n                maxHeight: isMobile ? '300px' : '450px',\n                height: isMobile ? '300px' : '450px',\n                overflowY: 'auto',\n                padding: isMobile ? '5px' : '10px',\n              }}\n            >\n              {/* Your chat messages - keep existing code */}\n              {answers.map((answer, idx) => (\n                <div\n                  key={idx}\n                  className=\"chat-message-container\"\n                  style={{\n                    marginBottom: '5px',\n                    padding: isMobile ? '3px' : '5px',\n                    borderRadius: '4px',\n                    border: '1px solid #ccc',\n                    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n                  }}\n                >\n                  {/* Keep your existing chat message content */}\n                  <div\n                    className=\"chat-user\"\n                    style={{\n                      textAlign: 'right',\n                      marginLeft: 'auto',\n                      padding: isMobile ? '3px' : '5px',\n                      fontSize: isMobile ? '12px' : '14px'\n                    }}\n                  >\n                    {client_user}: <span>{answer.user}</span>\n                  </div>\n                  <div\n                    className=\"chat-response-container\"\n                    style={{\n                      display: 'flex',\n                      alignItems: 'flex-start',\n                      backgroundColor: background_color_chat,\n                      padding: isMobile ? '5px' : '10px',\n                    }}\n                  >\n                    {imageSrc && (\n                      <div className=\"chat-image\" style={{ marginRight: isMobile ? '5px' : '10px' }}>\n                        <img src={imageSrc} alt=\"response\" style={{ width: isMobile ? '30px' : '50px' }} />\n                      </div>\n                    )}\n                    <div\n                      className=\"chat-response-text\"\n                      style={{ \n                        flex: 1, \n                        wordBreak: 'break-word',\n                        fontSize: isMobile ? '12px' : '14px'\n                      }}\n                    >\n                      {answer.resp\n                        ? <span dangerouslySetInnerHTML={{ __html: answer.resp }} />\n                        : <span className=\"spinner\" />}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Input text section - keep existing but adjust for mobile */}\n      {input_text && (\n        <>\n          <hr style={{ margin: '3px 0' }} />\n          <div className=\"form-group\" style={{ display: \"flex\", alignItems: \"center\" }}>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              placeholder={placeholder}\n              value={textString}\n              onChange={handleInputText}\n              onKeyDown={handleOnKeyDown}\n              style={{ \n                flex: 1,\n                fontSize: isMobile ? '14px' : '16px',\n                padding: isMobile ? '6px' : '8px'\n              }}\n            />\n          </div>\n          <hr style={{ margin: '3px 0' }} />\n        </>\n      )}\n\n          {editingDataframe &&\n            Array.isArray(editingDataframe) &&\n            editingDataframe.length > 0 &&\n            editedDataframe &&\n            Array.isArray(editedDataframe) &&\n            editedDataframe.length > 0 && (\n              <div\n                style={{\n            padding: 20,\n            border: \"2px solid #b3c6e0\",\n            borderRadius: \"12px\",\n            background: \"rgba(240, 248, 255, 0.7)\",\n            boxShadow: \"0 2px 12px rgba(100, 150, 200, 0.08)\",\n            marginBottom: 16,\n            marginTop: 8,\n                }}\n              >\n                <h3 style={{ marginTop: 0, color: \"#2a3b5d\" }}>Edit Dataframe</h3>\n                <table\n            style={{\n              borderCollapse: \"collapse\",\n              width: \"100%\",\n              background: \"rgba(255,255,255,0.5)\",\n              borderRadius: \"8px\",\n              overflow: \"hidden\",\n              boxShadow: \"0 1px 4px rgba(100,150,200,0.06)\",\n            }}\n                >\n            <thead>\n              <tr>\n                {Object.keys(editingDataframe[0]).map((col) => (\n                  <th\n              key={col}\n              style={{\n                border: \"1px solid #c8d6e5\",\n                padding: 6,\n                background: \"rgba(200,220,255,0.35)\",\n                color: \"#2a3b5d\",\n                fontWeight: 600,\n              }}\n                  >\n              {col}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {editedDataframe.map((row, rowIdx) => (\n                <tr key={rowIdx}>\n                  {Object.keys(row).map((col) => (\n              <td\n                key={col}\n                style={{\n                  border: \"1px solid #c8d6e5\",\n                  padding: 4,\n                  background: \"rgba(255,255,255,0.3)\",\n                }}\n              >\n                <input\n                  value={row[col]}\n                  onChange={e => {\n                    const newDF = editedDataframe.map((r, i) =>\n                i === rowIdx ? { ...r, [col]: e.target.value } : r\n                    );\n                    setEditedDataframe(newDF);\n                  }}\n                  style={{\n                    width: \"100%\",\n                    background: \"rgba(255,255,255,0.5)\",\n                    border: \"1px solid #b3c6e0\",\n                    borderRadius: \"4px\",\n                    padding: \"2px 4px\",\n                    color: \"#2a3b5d\",\n                  }}\n                />\n              </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n                </table>\n                <div style={{ marginTop: 12 }}>\n            <button\n              style={{\n                marginRight: 8,\n                background: \"rgba(42, 59, 93, 0.8)\",\n                color: \"#fff\",\n                border: \"none\",\n                borderRadius: \"4px\",\n                padding: \"6px 14px\",\n                cursor: \"pointer\",\n              }}\n              onClick={async () => {\n                // Send editedDataframe to API\n  await myFunc(textString, { api_body: { dataframe: editedDataframe } }, \"dataframe_edit\");\n  setEditingDataframe(null);\n  setEditedDataframe(null);\n              }}\n            >\n              Save\n            </button>\n            <button\n              style={{\n                background: \"rgba(200,220,255,0.5)\",\n                color: \"#2a3b5d\",\n                border: \"none\",\n                borderRadius: \"4px\",\n                padding: \"6px 14px\",\n                cursor: \"pointer\",\n              }}\n              onClick={() => {\n                setEditingDataframe(null);\n                setEditedDataframe(null);\n              }}\n            >\n              Cancel\n            </button>\n                </div>\n              </div>\n          )}\n\n<div className=\"form-group\" style={{ \n        display: \"flex\", \n        alignItems: \"left\", \n        flexWrap: \"wrap\",\n        gap: isMobile ? \"4px\" : \"8px\"\n      }}>\n        <button\n          onClick={click_listenButton}\n          style={{\n            marginLeft: isMobile ? 4 : 8,\n            background: listenButton ? 'rgb(26, 182, 28)' : \"rgb(19, 123, 193)\",\n            border: 'none',\n            borderRadius: '50%',\n            width: isMobile ? 32 : 36,\n            height: isMobile ? 32 : 36,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            cursor: 'pointer',\n            color: 'white',\n            fontSize: isMobile ? 16 : 20,\n            boxShadow: '0 1px 4px rgba(0,0,0,0.08)',\n            transition: 'background 0.2s',\n          }}\n          title=\"Click and Ask\"\n        >\n          <span role=\"img\" aria-label=\"microphone\">🎤</span>\n        </button>\n      \n<button\n  onClick={convo_mode}\n  onMouseEnter={() => setShowTooltip_conv(true)}\n  onMouseLeave={() => setShowTooltip_conv(false)}\n  style={{\n    marginLeft: 8,\n    background: convo_button ? 'rgb(26, 182, 28)' : \"rgb(19, 123, 193)\",\n    border: 'none',\n    borderRadius: '50%',\n    width: 36,\n    height: 36,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    cursor: 'pointer',\n    color: 'white',\n    fontSize: 20,\n    boxShadow: '0 1px 4px rgba(0,0,0,0.08)',\n    transition: 'background 0.2s',\n    position: 'relative',\n  }}\n>\n<span role=\"img\" aria-label={convo_button ? \"paper\" : \"x\"}>\n  {convo_button ? \"🎧\" : \"🔇\"}\n</span>  {showTooltip_conv && (\n    <span\n      style={{\n        position: \"absolute\",\n        top: \"-38px\",\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n        background: \"#222\",\n        color: \"#fff\",\n        padding: \"4px 10px\",\n        borderRadius: \"4px\",\n        fontSize: \"13px\",\n        whiteSpace: \"nowrap\",\n        zIndex: 1000,\n        pointerEvents: \"none\",\n      }}\n    >\n      {convo_button ? \"Listening On\" : \"Listening OFF\"}\n    </span>\n  )}\n</button>\n\n\n<button\n  onClick={listenSession}\n  onMouseEnter={() => setShowTooltip(true)}\n  onMouseLeave={() => setShowTooltip(false)}\n  style={{\n    marginLeft: 8,\n    background: session_listen ? 'rgb(26, 182, 28)' : \"rgb(19, 123, 193)\",\n    border: 'none',\n    borderRadius: '50%',\n    width: 36,\n    height: 36,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    cursor: 'pointer',\n    color: 'white',\n    fontSize: 20,\n    boxShadow: '0 1px 4px rgba(0,0,0,0.08)',\n    transition: 'background 0.2s',\n    position: 'relative',\n  }}\n>\n<span role=\"img\" aria-label={session_listen ? \"paper\" : \"x\"}>\n  {session_listen ? \"📄\" : \"📄\"}\n</span>  {showTooltip && (\n<span\n  style={{\n    position: \"absolute\",\n    top: \"-38px\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    background: \"#222\",\n    color: \"#fff\",\n    padding: \"4px 10px\",\n    borderRadius: \"4px\",\n    fontSize: \"13px\",\n    whiteSpace: \"normal\",      // allow text to wrap\n    maxWidth: \"220px\",         // prevent it from being too wide\n    textAlign: \"center\",       // center the text\n    zIndex: 1000,\n    pointerEvents: \"none\",\n  }}\n>\n  {session_listen ? \"ON\" : \"Keep Transcript Inplace\"}\n</span>\n  )}\n</button>\n\n</div>\n\n\n              {/* Agent Actions Horizontal Button-Style Multi-Select */}\n                {Array.isArray(agent_actions) && agent_actions.length > 0 && (\n                  <div\n                    style={{\n                      display: 'flex',\n                      flexWrap: 'wrap',\n                      justifyContent: 'right',\n                      marginTop: '8px',\n                      gap: '6px',\n                      alignItems: 'right',\n                    }}\n                  >\n                    <span style={{ fontWeight: 600, marginRight: 12, minWidth: 90, textAlign: 'left' }}>\n                      Agent Actions:\n                    </span>\n                    {agent_actions.map((action, idx) => {\n              const selected = selectedActions.includes(action);\n              return (\n                <button\n                  key={idx}\n                  onClick={() => {\n                    if (selected) {\n                      setSelectedActions(selectedActions.filter((a) => a !== action));\n                    } else {\n                      setSelectedActions([...selectedActions, action]);\n                    }\n                  }}\n                  style={{\n                    fontSize: '12px',\n                    padding: '5px 10px',\n                    backgroundColor: selected ? 'rgb(59, 159, 72)' : 'rgb(200, 233, 238)',\n                    color: selected ? 'white' : 'black',\n                    border: '1px solidrgb(239, 242, 244)',\n                    borderRadius: '4px',\n                    cursor: 'pointer',\n                  }}\n                >\n                  {action}\n                </button>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Dictaphone component */}\n        <div className=\"p-2\" style={{ marginBottom: '15px' }}>\n          <Dictaphone\n            commands={commands}\n            myFunc={myFunc}\n            listenAfterReply={listenAfterReply}\n            no_response_time={no_response_time}\n            apiInProgress={apiInProgress}\n            listenButton={listenButton}\n            session_listen={session_listen}\n            listening={listening}\n            initialFinalTranscript={kwargs.initialFinalTranscript || \"\"}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CustomVoiceGPT;\n","import React, { useEffect, useState } from \"react\"\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport VoiceGPT from \"./VoiceGPT.jsx\"\n\nconst Main = (props: ComponentProps) => {\n  const { api, kwargs } = props.args\n  useEffect(() => Streamlit.setFrameHeight())\n  return (\n    <>\n      <VoiceGPT api={api} kwargs={kwargs} />\n    </>\n  )\n}\n\nexport default withStreamlitConnection(Main)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Main from \"./Main\"\n// Lots of import to define a Styletron engine and load the light theme of baseui\nimport { Client as Styletron } from \"styletron-engine-atomic\"\nimport { Provider as StyletronProvider } from \"styletron-react\"\nimport { ThemeProvider, LightTheme } from \"baseui\"\n\nconst engine = new Styletron()\n\n// Wrap your CustomSlider with the baseui them\nReactDOM.render(\n  <React.StrictMode>\n    <StyletronProvider value={engine}>\n      <ThemeProvider theme={LightTheme}>\n        <Main />\n      </ThemeProvider>\n    </StyletronProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}