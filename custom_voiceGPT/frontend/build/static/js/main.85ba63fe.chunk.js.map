{"version":3,"sources":["Dictaphone.jsx","MediaDisplay.jsx","VoiceGPT.jsx","Main.tsx","index.tsx"],"names":["Dictaphone","_ref","commands","myFunc","listenAfterReply","no_response_time","apiInProgress","listenButton","session_listen","initialFinalTranscript","splitImage","finalTranscript","interimTranscript","resetTranscript","listening","browserSupportsSpeechRecognition","isMicrophoneAvailable","useSpeechRecognition","editableTranscript","setEditableTranscript","useState","show_transcript","setShowTranscript","selectedText","setSelectedText","selectionStart","setSelectionStart","selectionEnd","setSelectionEnd","showReplaceBox","setShowReplaceBox","replaceInput","setReplaceInput","isProcessingReplace","setIsProcessingReplace","textareaRef","useRef","cursorPosRef","replaceInputRef","transcriptHistory","setTranscriptHistory","handleTextSelection","current","start","end","selected","substring","length","handleReplaceText","async","trim","replaceCommand","api_body","action","original_text","replacement_prompt","result","undefined","_replaceInputRef$curr","console","log","originalPlaceholder","placeholder","setTimeout","newTranscript","focus","newCursorPos","setSelectionRange","error","handleCancelReplace","processTranscript","useCallback","prevHistory","updatedHistory","shift","prev","keywordFound","i","keywords","j","keyword","RegExp","search","useEffect","React","createElement","Fragment","style","display","gap","marginBottom","onClick","backgroundColor","color","border","padding","borderRadius","cursor","fontSize","showTranscript_func","clearTranscript_func","disabled","title","handleBackwards","lastSlice","slice","fontWeight","position","marginRight","visibility","opacity","textAlign","bottom","left","transform","zIndex","whiteSpace","transition","className","boxShadow","fontStyle","alignItems","ref","type","value","onChange","e","target","onKeyDown","key","flex","marginTop","flexDirection","maxHeight","height","overflowY","animation","marginLeft","newValue","onSelect","onMouseUp","onKeyUp","width","resize","MediaDisplay","showImage","imageSrc","largeHeight","largeWidth","smallHeight","smallWidth","justifyContent","toLowerCase","endsWith","maxWidth","objectFit","controls","autoPlay","loop","muted","src","alt","g_anwers","CustomVoiceGPT","props","_refresh_ask$color_di","api","kwargs","show_video","input_text","face_recon","api_key","refresh_ask","self_image","api_audio","client_user","force_db_root","before_trigger","agent_actions","setImageSrc","imageSrc_name","setImageSrc_name","message","setMessage","answers","setAnswers","setListenAfterReply","modelsLoaded","setModelsLoaded","captureVideo","setCaptureVideo","textString","setTextString","setApiInProgress","speaking","setSpeakingInProgress","setlistening","show_conversation","setshow_conversation","showTooltip","setShowTooltip","showTooltip_conv","setShowTooltip_conv","setlistenButton","setsession_listen","convo_button","setconvo_button","before_trigger_vars","before_trigger_","faceData","audioRef","UserUsedChatWindow","setUserUsedChatWindow","buttonName","setButtonName","buttonName_listen","setButtonName_listen","setShowImage","selectedActions","setSelectedActions","datatree","setDataTree","datatreeTitle","setDataTreeTitle","datatree_title","selectedNodes","setSelectedNodes","collapsed","setCollapsed","windowWidth","setWindowWidth","window","innerWidth","fetchImageData","response","axios","get","imageUrl","responseType","objectUrl","URL","createObjectURL","data","listenContinuously","SpeechRecognition","startListening","continuous","language","isMobile","test","navigator","userAgent","editingDataframe","setEditingDataframe","editedDataframe","setEditedDataframe","ret","command","originalText","replacementPrompt","_command$api_body","_command$api_body2","text","user","dataframe","body","tigger_type","face_data","selected_actions","selected_nodes","post","resp","pause","apiUrlWithFileName","Audio","play","Promise","resolve","onended","location","href","stopListening","findNodeByKey","tree","k","Object","entries","children","found","background_color_chat","color_dict","split","firstKey","nodeObj","nodeTitle","field_name","nodeLink","hyperlink","showSidebar","setShowSidebar","sidebarWide","setSidebarWide","minHeight","flexShrink","background","outline","aria-label","margin","alignSelf","borderRight","onSelectionChange","renderNodes","level","arguments","parentKeys","Array","isArray","map","_ref2","idx","nodePath","join","hasChildren","keys","isCollapsed","isLast","fontFamily","paddingTop","paddingBottom","top","[object Object]","toggleCollapse","lineHeight","userSelect","tabIndex","checked","includes","newSelected","filter","handleSelect","rel","textDecoration","overflow","textOverflow","verticalAlign","minWidth","node","answer","wordBreak","dangerouslySetInnerHTML","__html","event","borderCollapse","col","row","rowIdx","newDF","r","flexWrap","click_listenButton","role","onMouseEnter","onMouseLeave","pointerEvents","listenSession","a","withStreamlitConnection","args","Streamlit","setFrameHeight","VoiceGPT","engine","Styletron","ReactDOM","render","StrictMode","StyletronProvider","ThemeProvider","theme","LightTheme","Main","document","getElementById"],"mappings":"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","file":"static/js/main.85ba63fe.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport './spinner.css';\n\nconst Dictaphone = ({\n  commands,\n  myFunc,\n  listenAfterReply = false,\n  no_response_time = 3,\n  apiInProgress = false,\n  listenButton = false,\n  session_listen = false,\n  initialFinalTranscript = \"\",\n  splitImage = false,\n}) => {\n  const {\n    finalTranscript,\n    interimTranscript,\n    resetTranscript,\n    listening,\n    browserSupportsSpeechRecognition,\n    isMicrophoneAvailable,\n  } = useSpeechRecognition();\n\n  const [editableTranscript, setEditableTranscript] = useState(\"\");\n  const [show_transcript, setShowTranscript] = useState(true);\n\n  // New states for text selection and replacement\n  const [selectedText, setSelectedText] = useState(\"\");\n  const [selectionStart, setSelectionStart] = useState(0);\n  const [selectionEnd, setSelectionEnd] = useState(0);\n  const [showReplaceBox, setShowReplaceBox] = useState(false);\n  const [replaceInput, setReplaceInput] = useState(\"\");\n  const [isProcessingReplace, setIsProcessingReplace] = useState(false);\n\n  const textareaRef = useRef(null);\n  const cursorPosRef = useRef(null);\n  const replaceInputRef = useRef(null);\n\n  const [transcriptHistory, setTranscriptHistory] = useState([]);\n\n  // Handle text selection in textarea\n  const handleTextSelection = () => {\n    if (textareaRef.current) {\n      const start = textareaRef.current.selectionStart;\n      const end = textareaRef.current.selectionEnd;\n      const selected = editableTranscript.substring(start, end);\n\n      if (selected.length > 0) {\n        setSelectedText(selected);\n        setSelectionStart(start);\n        setSelectionEnd(end);\n        // setShowReplaceBox(true);\n        setReplaceInput(\"\"); // Clear previous input\n      } else {\n        setSelectedText(\"\");\n        setSelectionStart(0);\n        setSelectionEnd(0);\n      }\n    }\n  };\n\n  // Handle the replace operation\n  const handleReplaceText = async () => {\n    if (!replaceInput.trim() || !selectedText) return;\n\n    setIsProcessingReplace(true);\n\n    try {\n      // Create a special command for text replacement\n      const replaceCommand = {\n        api_body: {\n          action: \"replace_text\",\n          original_text: selectedText,\n          replacement_prompt: replaceInput.trim()\n        }\n      };\n\n      // Call myFunc and wait for the result\n      const result = await myFunc(replaceInput.trim(), replaceCommand, 9);\n\n      // Check if result is valid for replacement\n      if (result === null ||\n        result === undefined ||\n        result === \"\" ||\n        result === \"None\" ||\n        (typeof result === 'string' && result.trim() === \"\")) {\n\n        console.log(\"MyFunc returned empty/null result, not replacing text\");\n\n        // Show user feedback that no replacement occurred\n        setReplaceInput(\"\"); // Clear input but keep box open\n\n        // Optional: Show a temporary message\n        const originalPlaceholder = replaceInputRef.current?.placeholder;\n        if (replaceInputRef.current) {\n          replaceInputRef.current.placeholder = \"No replacement text returned - try a different prompt\";\n          setTimeout(() => {\n            if (replaceInputRef.current) {\n              replaceInputRef.current.placeholder = originalPlaceholder || \"Enter replacement text or prompt...\";\n            }\n          }, 3000);\n        }\n\n        return; // Exit without replacing text\n      }\n\n      // Replace the selected text with the result\n      const newTranscript =\n        editableTranscript.substring(0, selectionStart) +\n        result +\n        editableTranscript.substring(selectionEnd);\n\n      setEditableTranscript(newTranscript);\n      setShowReplaceBox(false);\n      setSelectedText(\"\");\n      setReplaceInput(\"\");\n\n      // Focus back to textarea and position cursor after replacement\n      if (textareaRef.current) {\n        textareaRef.current.focus();\n        const newCursorPos = selectionStart + result.length;\n        textareaRef.current.setSelectionRange(newCursorPos, newCursorPos);\n      }\n\n    } catch (error) {\n      console.error(\"Error replacing text:\", error);\n\n      // Show error feedback to user\n      if (replaceInputRef.current) {\n        const originalPlaceholder = replaceInputRef.current.placeholder;\n        replaceInputRef.current.placeholder = \"Error occurred during replacement\";\n        setTimeout(() => {\n          if (replaceInputRef.current) {\n            replaceInputRef.current.placeholder = originalPlaceholder || \"Enter replacement text or prompt...\";\n          }\n        }, 3000);\n      }\n    } finally {\n      setIsProcessingReplace(false);\n    }\n  };\n\n  // Cancel replace operation\n  const handleCancelReplace = () => {\n    setShowReplaceBox(false);\n    setSelectedText(\"\");\n    setReplaceInput(\"\");\n    setSelectionStart(0);\n    setSelectionEnd(0);\n    if (textareaRef.current) {\n      textareaRef.current.focus();\n    }\n  };\n\n\n\n  const showTranscript_func = () => setShowTranscript((prev) => !prev);\n\n  const clearTranscript_func = () => {\n    resetTranscript();\n    setEditableTranscript(\"\");\n    setShowReplaceBox(false);\n    setSelectedText(\"\");\n  };\n\n  const processTranscript = useCallback(() => {\n    if (finalTranscript !== \"\") {\n      // Add the current editableTranscript to the history\n      setTranscriptHistory((prevHistory) => {\n        const updatedHistory = [...prevHistory, editableTranscript];\n        // Keep only the last 8 slices\n        if (updatedHistory.length > 8) {\n          updatedHistory.shift(); // Remove the oldest slice\n        }\n        console.log(\"Updated transcript history:\", updatedHistory); // Debugging\n        return updatedHistory;\n      });\n\n      if (listenButton) {\n        // When session_listen is false and not using listenButton, just append\n        myFunc(finalTranscript, { api_body: {} }, 8);\n        setEditableTranscript((prev) => `${prev} ${finalTranscript}`.trim());\n        resetTranscript();\n        setEditableTranscript(\"\"); // Clear editable transcript state\n        return;\n      }\n\n      if (session_listen) {\n        // Check for keywords only when session_listen is true\n        let keywordFound = false;\n        for (let i = 0; i < commands.length; i++) {\n          const { keywords } = commands[i];\n          for (let j = 0; j < keywords.length; j++) {\n            const keyword = new RegExp(keywords[j], \"i\");\n            const isKeywordFound = finalTranscript.search(keyword) !== -1;\n\n            if (isKeywordFound && !apiInProgress) {\n              console.log(`Keyword found: ${keywords[j]}`);\n              myFunc(finalTranscript, commands[i], 1);\n              resetTranscript(); // Reset transcript after processing keyword\n              keywordFound = true;\n              return;\n            }\n          }\n        }\n\n        if (!keywordFound) {\n          // Append transcript if no keyword is found\n          setEditableTranscript((prev) => `${prev} ${finalTranscript}`.trim());\n          resetTranscript(); // Clear finalTranscript after appending\n        }\n      } else {\n        // When session_listen is false, focus on capturing speech-to-text\n        if (textareaRef.current) {\n          cursorPosRef.current = textareaRef.current.selectionStart;\n        }\n\n        console.log(\"Recording speech-to-text without keyword triggers\");\n        setEditableTranscript((prev) => `${prev} ${finalTranscript}`.trim());\n        resetTranscript(); // Clear finalTranscript after appending\n      }\n    }\n  }, [finalTranscript, listenButton, session_listen, commands, apiInProgress, editableTranscript]);\n\n\n  const handleTranscriptChange = (e) => {\n    const newValue = e.target.value;\n\n    // Update the editable transcript\n    setEditableTranscript(newValue);\n\n    // Add the current editableTranscript to the history\n    setTranscriptHistory((prevHistory) => {\n      const updatedHistory = [...prevHistory, editableTranscript];\n      // Keep only the last 8 slices\n      if (updatedHistory.length > 8) {\n        updatedHistory.shift(); // Remove the oldest slice\n      }\n      console.log(\"Updated transcript history (manual edit):\", updatedHistory); // Debugging\n      return updatedHistory;\n    });\n  };\n\n  const handleBackwards = () => {\n    setTranscriptHistory((prevHistory) => {\n      if (prevHistory.length > 0) {\n        const lastSlice = prevHistory[prevHistory.length - 1];\n        setEditableTranscript(lastSlice); // Revert to the last slice\n        return prevHistory.slice(0, -1); // Remove the last slice from history\n      }\n      return prevHistory; // If no history, do nothing\n    });\n  };\n\n  // Focus replace input when box appears\n  useEffect(() => {\n    if (showReplaceBox && replaceInputRef.current) {\n      setTimeout(() => {\n        replaceInputRef.current.focus();\n      }, 100);\n    }\n  }, [showReplaceBox]);\n\n  useEffect(() => {\n    if (initialFinalTranscript) {\n      setEditableTranscript((prev) => `${prev} ${initialFinalTranscript}`.trim());\n    }\n\n    processTranscript();\n  }, [initialFinalTranscript, processTranscript]);\n\n\n  useEffect(() => {\n    if (textareaRef.current && cursorPosRef.current !== null) {\n      textareaRef.current.selectionStart = cursorPosRef.current;\n      textareaRef.current.selectionEnd = cursorPosRef.current;\n      cursorPosRef.current = null;\n    }\n  }, [editableTranscript]);\n\n\n  if (!browserSupportsSpeechRecognition) {\n    return <span>No browser support</span>;\n  }\n\n  if (!isMicrophoneAvailable) {\n    return <span>Please allow access to the microphone</span>;\n  }\n\n  return (\n    <>\n      <div style={{ display: \"flex\", gap: \"10px\", marginBottom: \"10px\" }}>\n        <button\n          onClick={() => {\n            myFunc(editableTranscript, { api_body: {} }, 5);\n            resetTranscript();\n            setEditableTranscript(\"\");\n          }}\n          style={{\n            backgroundColor: \"rgb(196, 230, 252)\",\n            color: \"black\",\n            border: \"none\",\n            padding: \"5px 10px\",\n            borderRadius: \"3px\",\n            cursor: \"pointer\",\n            fontSize: \"0.9em\",\n          }}\n        >\n          Send Transcript\n        </button>\n        <button\n          onClick={showTranscript_func}\n          style={{\n            backgroundColor: \"white\",\n            color: \"grey\",\n            border: \"none\",\n            padding: \"5px 10px\",\n            borderRadius: \"3px\",\n            cursor: \"pointer\",\n            fontSize: \"0.9em\",\n          }}\n        >\n          {show_transcript ? \"Hide Transcript\" : \"Show Transcript\"}\n        </button>\n        <button\n          onClick={clearTranscript_func}\n          style={{\n            backgroundColor: \"white\",\n            color: \"grey\",\n            border: \"none\",\n            padding: \"5px 10px\",\n            borderRadius: \"3px\",\n            cursor: \"pointer\",\n            fontSize: \"0.9em\",\n          }}\n        >\n          Clear Transcript\n        </button>\n\n        {/* New button to show replace functionality hint */}\n        <button\n          onClick={() => {\n            if (selectedText) {\n              setShowReplaceBox(true);\n              setReplaceInput(\"\"); // Clear previous input\n            }\n          }}\n          disabled={!selectedText}\n          style={{\n            backgroundColor: selectedText ? \"rgb(255, 245, 157)\" : \"rgb(245, 245, 245)\",\n            color: selectedText ? \"black\" : \"grey\",\n            border: \"none\",\n            padding: \"5px 10px\",\n            borderRadius: \"3px\",\n            cursor: selectedText ? \"pointer\" : \"not-allowed\",\n            fontSize: \"0.8em\",\n          }}\n          title={selectedText ? \"Click to replace selected text\" : \"Select text in transcript first\"}\n        >\n          {selectedText ? `Replace: \"${selectedText.substring(0, 20)}${selectedText.length > 20 ? '...' : ''}\"` : \"Select text to replace\"}\n        </button>\n      </div>\n\n<button\n  onClick={handleBackwards}\n  disabled={transcriptHistory.length === 0} // Disable if no history\n  style={{\n    backgroundColor: transcriptHistory.length > 0 ? \"rgb(213, 209, 150)\" : \"#ccc\",\n    color: \"white\",\n    border: \"none\",\n    padding: \"3px 6px\",\n    borderRadius: \"4px\",\n    cursor: transcriptHistory.length > 0 ? \"pointer\" : \"not-allowed\",\n    fontSize: \"0.9em\",\n    fontWeight: \"bold\",\n    position: \"relative\", // For tooltip positioning\n  }}\n>\n  <span style={{ fontSize: \"1.2em\", marginRight: \"6px\" }}>&larr;</span>\n  <span\n    style={{\n      visibility: \"hidden\", // Initially hidden\n      opacity: 0, // Initially transparent\n      backgroundColor: \"black\",\n      color: \"white\",\n      textAlign: \"center\",\n      borderRadius: \"4px\",\n      padding: \"5px\",\n      position: \"absolute\",\n      bottom: \"120%\", // Position above the button\n      left: \"50%\",\n      transform: \"translateX(-50%)\",\n      zIndex: 1,\n      fontSize: \"0.8em\",\n      whiteSpace: \"nowrap\",\n      transition: \"opacity 0.2s ease-in-out\", // Smooth fade-in effect\n    }}\n    className=\"tooltip\"\n  >\n    Revert Transcript\n  </span>\n</button>\n\n      {/* Replace text input box */}\n      {showReplaceBox && (\n        <div style={{\n          position: \"relative\",\n          backgroundColor: \"rgb(255, 248, 220)\",\n          border: \"2px solid rgb(255, 193, 7)\",\n          borderRadius: \"8px\",\n          padding: \"15px\",\n          marginBottom: \"10px\",\n          boxShadow: \"0 4px 12px rgba(0,0,0,0.15)\"\n        }}>\n          <div style={{ marginBottom: \"10px\", fontSize: \"0.9em\", fontWeight: \"bold\" }}>\n            Replace: \"<span style={{ fontStyle: \"italic\", color: \"#666\" }}>{selectedText}</span>\"\n          </div>\n\n          <div style={{ display: \"flex\", gap: \"8px\", alignItems: \"center\" }}>\n            <input\n              ref={replaceInputRef}\n              type=\"text\"\n              value={replaceInput}\n              onChange={(e) => setReplaceInput(e.target.value)}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter') {\n                  handleReplaceText();\n                } else if (e.key === 'Escape') {\n                  handleCancelReplace();\n                }\n              }}\n              placeholder=\"Enter replacement text or prompt...\"\n              style={{\n                flex: 1,\n                padding: \"8px\",\n                border: \"1px solid #ddd\",\n                borderRadius: \"4px\",\n                fontSize: \"0.9em\"\n              }}\n              disabled={isProcessingReplace}\n            />\n\n            <button\n              onClick={handleReplaceText}\n              disabled={!replaceInput.trim() || isProcessingReplace}\n              style={{\n                backgroundColor: isProcessingReplace ? \"#ccc\" : \"rgb(40, 167, 69)\",\n                color: \"white\",\n                border: \"none\",\n                padding: \"8px 15px\",\n                borderRadius: \"4px\",\n                cursor: isProcessingReplace ? \"not-allowed\" : \"pointer\",\n                fontSize: \"0.9em\",\n                fontWeight: \"bold\"\n              }}\n            >\n              {isProcessingReplace ? \"⏳\" : \"Replace\"}\n            </button>\n\n            {/* ADD THIS CANCEL BUTTON */}\n            <button\n              onClick={handleCancelReplace}\n              disabled={isProcessingReplace}\n              style={{\n                backgroundColor: \"rgb(108, 117, 125)\",\n                color: \"white\",\n                border: \"none\",\n                padding: \"8px 15px\",\n                borderRadius: \"4px\",\n                cursor: isProcessingReplace ? \"not-allowed\" : \"pointer\",\n                fontSize: \"0.9em\",\n                fontWeight: \"bold\"\n              }}\n            >\n              Cancel\n            </button>\n          </div>\n\n          <div style={{ marginTop: \"8px\", fontSize: \"0.8em\", color: \"#666\" }}>\n            💡 Note: `Replace, will replace text with {splitImage}'s response`;\n          </div>\n        </div>\n      )}\n\n      {show_transcript && (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            maxHeight: \"800px\",\n            height: \"550px\",\n            overflowY: \"auto\",\n            border: \"1px solid #ccc\",\n            padding: \"10px\",\n          }}\n        >\n          <span>\n            <strong>Listening:</strong>{\" \"}\n            <span\n              style={{\n                color: listening ? \"green\" : \"gray\",\n                fontWeight: 600,\n                animation: listening ? \"flash-green 1s infinite alternate\" : \"none\",\n              }}\n            >\n              {listening ? \"ON\" : \"OFF\"}\n            </span>\n            <style>\n              {`\n                @keyframes flash-green {\n                  0% { opacity: 1; }\n                  100% { opacity: 0.4; }\n                }\n              `}\n            </style>\n          </span>\n\n          <span>\n            <strong>Transcript:</strong>\n            {selectedText && (\n              <span style={{ marginLeft: \"10px\", fontSize: \"0.8em\", color: \"#666\" }}>\n                (`Replace with {splitImage}'s response`);\n              </span>\n            )}\n          </span>\n\n          {interimTranscript && (\n            <div style={{ color: \"#888\", fontStyle: \"italic\", marginBottom: \"8px\" }}>\n              {interimTranscript}\n            </div>\n          )}\n\n          <textarea\n            ref={textareaRef}\n            value={editableTranscript}\n            onChange={handleTranscriptChange}\n            onSelect={handleTextSelection} // Add selection handler\n            onMouseUp={handleTextSelection} // Handle mouse selection\n            onKeyUp={handleTextSelection} // Handle keyboard selection\n            style={{\n              backgroundColor: \"rgb(255, 255, 255)\",\n              color: \"black\",\n              width: \"100%\",\n              height: \"550px\",\n              border: \"1px solid #ccc\",\n              padding: \"5px\",\n              resize: \"none\",\n            }}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Dictaphone;","import React from 'react';\n\nconst MediaDisplay = ({ showImage, imageSrc, largeHeight = 100, largeWidth = 100, smallHeight = 40, smallWidth = 40 }) => {\n    // Determine the dimensions based on `showImage` status\n    const height = showImage ? largeHeight : smallHeight;\n    const width = showImage ? largeWidth : smallWidth;\n  \n    return (\n      <div className=\"p-2\" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        {/* Always show the image or video at the top center based on `showImage` */}\n        <div style={{ display: 'flex', justifyContent: 'center', width: '100%' }}>\n          {imageSrc && (\n            imageSrc.toLowerCase().endsWith(\".mp4\") ? (\n              <video\n                style={{ maxWidth: '100%', borderRadius: '8px', objectFit: 'cover' }}\n                height={height}\n                width={width}\n                controls={showImage} // Only show controls if `showImage` is true\n                autoPlay\n                loop={false}\n                muted\n              >\n                <source src={imageSrc} type=\"video/mp4\" />\n                Your browser does not support the video tag.\n              </video>\n            ) : (\n              <img\n                src={imageSrc}\n                height={height}\n                width={width}\n                style={{ maxWidth: '100%', borderRadius: '8px', objectFit: 'cover' }}\n                alt=\"Media Preview\"\n              />\n            )\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  export default MediaDisplay;","import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\n// import { Streamlit } from \"streamlit-component-lib\";\nimport SpeechRecognition from \"react-speech-recognition\";\nimport Dictaphone from \"./Dictaphone\";\nimport MediaDisplay from \"./MediaDisplay\";\nimport './spinner.css';\n\n\n// let timer = null;\n// let faceTimer = null;\nlet g_anwers = [];\n// let firstFace = false;\n\nconst CustomVoiceGPT = (props) => {\n  const { api, kwargs = {} } = props;\n  const {\n    commands,\n    height,\n    width,\n    show_video,\n    input_text,\n    no_response_time,\n    face_recon,\n    api_key,\n    refresh_ask,\n    self_image,\n    api_audio,\n    client_user,\n    force_db_root,\n    before_trigger,\n    agent_actions,\n  } = kwargs;\n\n  const [imageSrc, setImageSrc] = useState(kwargs.self_image);\n  const [imageSrc_name, setImageSrc_name] = useState(kwargs.self_image);\n\n  const [message, setMessage] = useState(\"\");\n  const [answers, setAnswers] = useState(kwargs.answers || []);\n  const [listenAfterReply, setListenAfterReply] = useState(false);\n\n  const [modelsLoaded, setModelsLoaded] = useState(false);\n  const [captureVideo, setCaptureVideo] = useState(false);\n  const [textString, setTextString] = useState(\"\");\n  const [apiInProgress, setApiInProgress] = useState(false); // Added state for API in progress\n  const [speaking, setSpeakingInProgress] = useState(false); // Added state for API in progresslistening\n  const [listening, setlistening] = useState(false); // Added state for API in progress\n\n  const [show_conversation, setshow_conversation] = useState(true); // Added state for API in progress\n  // Inside your component:\nconst [showTooltip, setShowTooltip] = useState(false);\nconst [showTooltip_conv, setShowTooltip_conv] = useState(false);\n  const [listenButton, setlistenButton] = useState(false); // Added state for API in progress\n  const [session_listen, setsession_listen] = useState(false);\n  const [convo_button, setconvo_button] = useState(false); // Added state for API in progress\n\n  const [before_trigger_vars, before_trigger_] = useState(kwargs.before_trigger); \n  const faceData = useRef([]);\n  // const faceTriggered = useRef(false);\n  // const videoRef = useRef();\n  // const videoHeight = 480;\n  // const videoWidth = 640;\n  // const canvasRef = useRef();\n  const audioRef = useRef(null);\n  \n\n  const [UserUsedChatWindow, setUserUsedChatWindow] = useState(false);\n  const [buttonName, setButtonName] = useState(\"Click and Ask\");\n  const [buttonName_listen, setButtonName_listen] = useState(\"Listening\");\n\n  const [showImage, setShowImage] = useState(false); // Step 1: Define showImage state\n  const [selectedActions, setSelectedActions] = useState([]);\n  const [datatree, setDataTree] = useState(kwargs.datatree || {});\n  const [datatreeTitle, setDataTreeTitle] = useState(kwargs.datatree_title || \"\");\n\n\nconst [selectedNodes, setSelectedNodes] = useState([]);\n\n// SidebarTree with collapsible nodes, no text wrapping, and improved style\n// Move collapsed and setCollapsed state up to the parent component\nconst [collapsed, setCollapsed] = useState({});\n\nconst SidebarTree = ({ datatree = {}, onSelectionChange, collapsed, setCollapsed }) => {\n  // Remove local collapsed state from SidebarTree\n\n  const handleSelect = (key) => {\n    let newSelected;\n    if (selectedNodes.includes(key)) {\n      newSelected = selectedNodes.filter((k) => k !== key);\n    } else {\n      newSelected = [...selectedNodes, key];\n    }\n    if (onSelectionChange) onSelectionChange(newSelected);\n  };\n\n  // Use a unique path for each node\n  const toggleCollapse = (nodePath) => {\n    setCollapsed((prev) => ({\n      ...prev,\n      [nodePath]: prev[nodePath] === undefined ? false : !prev[nodePath],\n    }));\n  };\n\n  const renderNodes = (tree, level = 1, parentKeys = []) => {\n    if (!tree || typeof tree !== \"object\" || Array.isArray(tree)) return null;\n    const entries = Object.entries(tree);\n    return entries.map(([key, value], idx) => {\n      const nodePath = [...parentKeys, key].join(\"/\"); // Unique path for each node\n      const hasChildren =\n        value.children &&\n        typeof value.children === \"object\" &&\n        !Array.isArray(value.children) &&\n        Object.keys(value.children).length > 0;\n      const isCollapsed = collapsed[nodePath] !== undefined ? collapsed[nodePath] : true;\n      const isLast = idx === entries.length - 1;\n\n      return (\n        <div\n          key={nodePath}\n          style={{\n            marginLeft: level * 14,\n            position: \"relative\",\n            whiteSpace: \"nowrap\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n            fontSize: \"14px\",\n            fontFamily: \"inherit\",\n            marginBottom: \"2px\",\n            paddingTop: \"4px\",\n            paddingBottom: \"4px\",\n          }}\n        >\n          {level > 0 && (\n            <div\n              style={{\n                position: \"absolute\",\n                left: -5,\n                top: 0,\n                height: \"100%\",\n                width: 16,\n                zIndex: 0,\n              }}\n            >\n              <div\n                style={{\n                  position: \"absolute\",\n                  left: -5,\n                  top: 0,\n                  bottom: isLast ? \"50%\" : 0,\n                  width: 2,\n                  background: \"#bbb\",\n                  height: hasChildren && !isCollapsed ? \"50%\" : \"100%\",\n                }}\n              />\n              <div\n                style={{\n                  position: \"absolute\",\n                  left: 7,\n                  top: 12,\n                  width: 9,\n                  height: 2,\n                  background: \"#bbb\",\n                }}\n              />\n            </div>\n          )}\n          <div style={{ display: \"flex\", alignItems: \"center\", position: \"relative\", zIndex: 1 }}>\n            {hasChildren && (\n              <button\n                onClick={() => toggleCollapse(nodePath)}\n                style={{\n                  border: \"none\",\n                  background: \"transparent\",\n                  cursor: \"pointer\",\n                  fontSize: \"14px\",\n                  marginRight: \"4px\",\n                  padding: 0,\n                  width: \"18px\",\n                  height: \"18px\",\n                  lineHeight: \"18px\",\n                  userSelect: \"none\",\n                }}\n                aria-label={isCollapsed ? \"Expand\" : \"Collapse\"}\n                tabIndex={-1}\n              >\n                {isCollapsed ? \"▶\" : \"▼\"}\n              </button>\n            )}\n            <input\n              type=\"checkbox\"\n              checked={selectedNodes.includes(key)}\n              onChange={() => handleSelect(key)}\n              style={{ marginRight: \"10px\" }}\n            />\n            {value.hyperlink ? (\n              <a\n                href={value.hyperlink}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                style={{\n                  textDecoration: \"none\",\n                  color: \"#2980b9\",\n                  fontWeight: 500,\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                  whiteSpace: \"nowrap\",\n                  maxWidth: \"100%\",\n                  display: \"inline-block\",\n                  verticalAlign: \"middle\",\n                }}\n                title={value.field_name}\n              >\n                {value.field_name}\n              </a>\n            ) : (\n              <span\n                style={{\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                  whiteSpace: \"nowrap\",\n                  maxWidth: \"160px\",\n                  display: \"inline-block\",\n                  verticalAlign: \"middle\",\n                }}\n                title={value.field_name}\n              >\n                {value.field_name}\n              </span>\n            )}\n          </div>\n          {hasChildren && !isCollapsed && (\n            <div style={{ width: \"100%\" }}>\n              {renderNodes(value.children, level + 1, [...parentKeys, key])}\n            </div>\n          )}\n        </div>\n      );\n    });\n  };\n\n  if (!datatreeTitle || !datatree) return null;\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        padding: 10,\n        maxHeight: 800,\n        overflowY: \"auto\",\n        background: \"transparent\",\n      }}\n    >\n      <h4 style={{ margin: \"0 0 8px 0\", fontWeight: 600 }}>{datatreeTitle}</h4>\n      <div>{renderNodes(datatree)}</div>\n    </div>\n  );\n};\n\n  const [windowWidth, setWindowWidth] = useState(0); // Initial value\n\n    // Create a reusable function for getting the window width\n    const updateWindowWidth = () => {\n      if (typeof window !== 'undefined') {\n          setWindowWidth(window.innerWidth);\n      }\n  };\n\n  // Call the function on component mount to set the initial window width\n  useEffect(() => {\n      updateWindowWidth();\n  }, []);\n\n  useEffect(() => {\n    if (self_image) {\n      // Fetch the image data from the API endpoint\n      fetchImageData(self_image);\n    }\n  }, [self_image]);\n\n  const fetchImageData = async (imageUrl) => {\n    try {\n      const response = await axios.get(`${api_audio}${imageUrl}`, {\n        responseType: 'blob', // Set responseType to 'blob' to handle file response\n      });\n      const objectUrl = URL.createObjectURL(response.data); // Use a different variable name here\n      setImageSrc(objectUrl);\n      setImageSrc_name(imageUrl)\n    } catch (error) {\n      console.error('Error fetching image data:', error);\n    }\n  };\n\n\n\n  const listenContinuously = async () =>{\n    setlistening(true)\n    SpeechRecognition.startListening({\n      continuous: true,\n      language: \"en-US\",\n    })\n\n}\n\nconst isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n\n// Update convo_mode function:\nconst convo_mode = async () => {\n  console.log(\"convo_mode - listening?\", listening, \"isMobile:\", isMobile, \"convo_button:\", convo_button);\n  \n  if (!convo_button) {\n    console.log(\"Starting continuous listening...\");\n    setconvo_button(true);\n    listenContinuously();\n  } else {\n    console.log(\"Stopping continuous listening...\");\n    setconvo_button(false);\n    setlistening(false);\n    SpeechRecognition.stopListening();\n  }\n};\n\n// Also update your stopListening function to properly sync the states:\nconst stopListening = () => {\n  setlistening(false);\n  setconvo_button(false); // Add this line to sync the states\n  SpeechRecognition.stopListening();\n  console.log(\"Stopping Listening, isListening=\", listening);\n};\n\n\n  const listenSession = () =>{\n    if (session_listen) {\n    setsession_listen(false)\n  }\n  else{\n    setsession_listen(true)\n  }\n    }\n\n\n\n\n  const handleInputText = (event) => {\n    // Update the state with the input text\n    setTextString(event.target.value);\n  \n    // Set a variable to indicate that the user used the chat window\n    setUserUsedChatWindow(true);\n  };\n\n  const handleOnKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      console.log(\"textString :>> \", textString);\n      myFunc(textString, { api_body: { keyword: \"\" } }, 4);\n      setTextString(\"\");\n    }\n  };\n\n\n  const click_listenButton = () => {\n    setlistenButton(true)\n    if (!listening) {\n      listenContinuously()\n    }\n    setButtonName(\"Please Speak\")\n    console.log(\"listening button listen click\");\n    console.log(listenButton);\n  };\n  const [editingDataframe, setEditingDataframe] = useState(null);\n  const [editedDataframe, setEditedDataframe] = useState(null);\n\n  const myFunc = async (ret, command, type) => {\n\n  let originalText = null;\n  let replacementPrompt = null;\n\n  if (type === 9) {\n    console.log(\"Text replacement test - type 9 detected\");\n    originalText = command.api_body?.original_text || \"\"; // Set original text\n    replacementPrompt = command.api_body?.replacement_prompt || \"\"; // Set replacement prompt\n\n    console.log(\"Original text:\", originalText);\n    console.log(\"Replacement prompt:\", replacementPrompt);\n  //   // // Return test string for replacement\n  //   // return \"TEST REPLACEMENT TEXT - This is a TEST\";\n  }\n\n    setMessage(` (${command[\"api_body\"][\"keyword\"]}) ${ret},`);\n    const text = [...g_anwers, { user: ret }];\n    setAnswers([...text]);\n    try {\n      console.log(\"api call on listen...\", command);\n      console.log(\"selected_nodes\", selectedNodes);\n      setApiInProgress(true); // Set API in progress to true\n      // stopListening()\n      // how do I get the dataframe from type?\n      let dataframe = null;\n      if (type === \"dataframe_edit\" && command.api_body && command.api_body.dataframe) {\n        dataframe = command.api_body.dataframe;\n      }\n      const body = {\n        tigger_type: type,\n        api_key: api_key,\n        text: text,\n        self_image: imageSrc_name,\n        face_data: faceData.current,\n        refresh_ask: refresh_ask,\n        client_user: client_user,\n        force_db_root:force_db_root,\n        session_listen:session_listen,\n        before_trigger_vars:before_trigger_vars,\n        selected_actions: selectedActions,\n        selected_nodes: selectedNodes,\n        dataframe: dataframe,\n        originalText: originalText,\n        replacementPrompt: replacementPrompt,\n      };\n      console.log(\"api\");\n      const { data } = await axios.post(api, body);\n      console.log(\"data :>> \", data, body);\n      if (type === 9) {\n        let resp = data[\"text\"][data[\"text\"].length - 1].resp || \"\";\n        console.log(\"Text replacement response:\", resp);\n        \n        return resp;\n      }\n\n      if (data[\"self_image\"] && data[\"self_image\"] !== imageSrc_name) {\n        fetchImageData(data[\"self_image\"]); // Fetch image data if it's different\n      }\n      \n      if (data[\"text\"]) {\n        setAnswers(data[\"text\"]);\n        g_anwers = [...data[\"text\"]];\n      }\n      \n      if (audioRef.current) {\n        audioRef.current.pause(); // Pause existing playback if any\n      }\n\n      if (data[\"audio_path\"]) {\n        const apiUrlWithFileName = `${api_audio}${data[\"audio_path\"]}`;\n        audioRef.current = new Audio(apiUrlWithFileName);\n    \n        try {\n            await audioRef.current.play();\n            \n            // Set state to indicate speaking in progress\n            setSpeakingInProgress(true);\n            setButtonName_listen(\"Speaking\");\n    \n            // Await playback completion\n            await new Promise((resolve) => {\n                audioRef.current.onended = () => {\n                    console.log(\"Audio playback finished.\");\n                    resolve();\n                };\n            });\n    \n        } catch (error) {\n            console.error(\"Audio playback error:\", error);\n        } finally {\n            // Cleanup or reset after playback\n            audioRef.current = null;\n            setSpeakingInProgress(false);\n            setButtonName_listen(\"Listen\");\n        }\n    }\n\n      setButtonName(\"Click and Ask\")\n      setButtonName_listen(\"Listening\")\n      setSpeakingInProgress(false)\n      setApiInProgress(false)\n      setListenAfterReply(data[\"listen_after_reply\"]);\n      \n      console.log(\"listen after reply\", data[\"listen_after_reply\"], listenAfterReply);\n\n      if (data[\"page_direct\"] !== false && data[\"page_direct\"] !== null) {\n        console.log(\"api has page direct\", data[\"page_direct\"]);\n        // window.location.reload();\n        window.location.href = data[\"page_direct\"];\n      }\n\n      if (UserUsedChatWindow) {\n        setUserUsedChatWindow(false)\n      }\n      else if (listenAfterReply==true) {\n        console.log(\"API END HIT listenAfterReply==TRUE\")\n        setButtonName_listen(\"Awaiting your Answer please speak\")\n      }\n      else if (listenButton) {\n      setlistenButton(false)\n      stopListening()\n      }\n      else if (convo_button){\n        console.log(\"convo mode\")\n        // listenContinuously()\n      }\n\n      if (data[\"dataframe\"]) {\n        setEditingDataframe(data[\"dataframe\"]);\n        setEditedDataframe(data[\"dataframe\"]);\n        return; // Exit further processing if you want\n}\n      if (type === 9) {\n        return data[\"text\"][data[\"text\"].length - 1].response || \"\";\n      }\n\n    } catch (error) {\n      console.log(\"api call on listen failed!\", error);\n      setApiInProgress(false); // Set API in progress to false on error\n      setlistenButton(false)\n    }\n\n    // updateWindowWidth();\n    console.log(\"ReSize Window\")\n    setSelectedActions([]);\n  };\n\n// Recursive function to find a node by key in the datatree\nfunction findNodeByKey(tree, key) {\n  if (!tree || typeof tree !== \"object\") return null;\n  for (const [k, value] of Object.entries(tree)) {\n    if (k === key) return value;\n    if (value.children) {\n      const found = findNodeByKey(value.children, key);\n      if (found) return found;\n    }\n  }\n  return null;\n}\n\n  const background_color_chat = refresh_ask?.color_dict?.background_color_chat || 'transparent';\n  const splitImage = self_image.split('.')[0]; // Split by dot\n  const placeholder = `Chat with ${splitImage}`;\n\n  const firstKey = selectedNodes[0] || null;\n  const nodeObj = firstKey ? findNodeByKey(datatree, firstKey) : null;\n  const nodeTitle = nodeObj?.field_name;\n  const nodeLink = nodeObj?.hyperlink;\n\n  const [showSidebar, setShowSidebar] = useState(false);\n  const [sidebarWide, setSidebarWide] = useState(450);\n\nreturn (\n  <div style={{ display: \"flex\", width: \"100%\", minHeight: \"100vh\" }}>\n    {/* Sidebar Toggle and Sidebar - Only show if not mobile or if sidebar is open */}\n    {(!isMobile || showSidebar) && (\n      <div style={{ display: \"flex\", flexDirection: \"column\", flexShrink: 0 }}>\n        {/* Sidebar Toggle Button */}\n        <div style={{ display: \"flex\", alignItems: \"center\", padding: isMobile ? \"2px 4px\" : \"4px 8px\" }}>\n          <button\n            onClick={() => setShowSidebar((prev) => !prev)}\n            style={{\n              fontSize: isMobile ? \"16px\" : \"18px\",\n              padding: isMobile ? \"2px 8px\" : \"4px 10px\",\n              marginRight: isMobile ? \"3px\" : \"6px\",\n              border: \"none\",\n              borderRadius: \"50%\",\n              background: \"transparent\",\n              color: \"#2980b9\",\n              cursor: \"pointer\",\n              height: isMobile ? \"28px\" : \"32px\",\n              width: isMobile ? \"28px\" : \"32px\",\n              boxShadow: \"none\",\n              outline: \"none\",\n              transition: \"background 0.2s\",\n            }}\n            aria-label={showSidebar ? \"Hide Sidebar\" : \"Show Sidebar\"}\n          >\n            {showSidebar ? \"⏴\" : \"⏵\"}\n          </button>\n        </div>\n        \n        {/* Sidebar Width Toggle Button (only visible when sidebar is open) */}\n        {showSidebar && !isMobile && (\n          <button\n            onClick={() => setSidebarWide((prev) => (prev === 450 ? 250 : 450))}\n            style={{\n              border: \"transparent\",\n              background: \"transparent\",\n              cursor: \"pointer\",\n              height: \"32px\",\n              margin: \"6px 0 0 0\",\n              width: \"32px\",\n              alignSelf: \"flex-end\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              borderRadius: \"50%\",\n              boxShadow: \"none\",\n              transition: \"background 0.2s\",\n            }}\n          >\n            {sidebarWide === 450 ? <span>⏪</span> : <span>⏩</span>}\n          </button>\n        )}\n        \n        {/* Sidebar Tree */}\n        {showSidebar && (\n          <div \n            style={{ \n              width: isMobile ? \"280px\" : sidebarWide, \n              borderRight: \"1px solid #ccc\", \n              padding: isMobile ? 5 : 10, \n              transition: \"width 0.2s\",\n              maxHeight: isMobile ? \"50vh\" : \"none\",\n              overflowY: isMobile ? \"auto\" : \"visible\"\n            }}\n          >\n            <SidebarTree\n              datatree={datatree}\n              onSelectionChange={setSelectedNodes}\n              collapsed={collapsed}\n              setCollapsed={setCollapsed}\n            />          \n          </div>\n        )}\n      </div>\n    )}\n\n    {/* Main Content */}\n    <div \n      style={{ \n        flex: 1, \n        padding: isMobile ? \"4px\" : \"8px\", // Reduce padding on mobile\n        minWidth: 0 // Prevent flex item from overflowing\n      }}\n    >\n      {/* Mobile-only sidebar toggle when sidebar is hidden */}\n      {isMobile && !showSidebar && (\n        <div style={{ marginBottom: \"8px\" }}>\n          <button\n            onClick={() => setShowSidebar(true)}\n            style={{\n              fontSize: \"16px\",\n              padding: \"4px 8px\",\n              border: \"1px solid #2980b9\",\n              borderRadius: \"4px\",\n              background: \"transparent\",\n              color: \"#2980b9\",\n              cursor: \"pointer\",\n            }}\n          >\n            {showSidebar ? \"⏴\" : \"⏵\"}\n          </button>\n        </div>\n      )}\n\n      <div>\n        {firstKey && nodeObj ? (\n          <div style={{ fontSize: isMobile ? \"14px\" : \"16px\", marginBottom: \"8px\" }}>\n            Working Page:{\" \"}\n            {nodeLink ? (\n              <a href={nodeLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                {nodeTitle}\n              </a>\n            ) : (\n              nodeTitle\n            )}\n          </div>\n        ) : (\n          <div></div>\n        )}\n\n        {/* Show other selected nodes, if any */}\n        {selectedNodes.length > 1 && (\n          <div style={{ marginTop: 8, fontSize: isMobile ? \"12px\" : \"14px\" }}>\n            <strong>Extra Context:</strong>{\" \"}\n            {selectedNodes.slice(1).map((key, idx) => {\n              const node = findNodeByKey(datatree, key);\n              return (\n                <span key={key} style={{ marginRight: 8 }}>\n                  {node?.field_name || key}\n                  {idx < selectedNodes.length - 2 ? \",\" : \"\"}\n                </span>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n      {/* Rest of your content stays the same but with mobile padding adjustments */}\n      <div style={{ display: 'flex', flexDirection: 'column', width: '100%' }}>\n        {/* Media Display */}\n        <div>\n          <MediaDisplay\n            showImage={showImage}\n            imageSrc={imageSrc}\n            largeHeight={isMobile ? 80 : 100}\n            largeWidth={isMobile ? 80 : 100}\n            smallHeight={isMobile ? 30 : 40}\n            smallWidth={isMobile ? 30 : 40}\n          />\n        </div>\n\n        {/* Chat window */}\n        <div style={{ \n          flex: showImage ? 1 : '100%', \n          overflowY: 'auto', \n          maxHeight: isMobile ? '300px' : '450px' \n        }}>\n          {show_conversation && (\n            <div\n              style={{\n                display: 'flex',\n                flexDirection: 'column',\n                maxHeight: isMobile ? '300px' : '450px',\n                height: isMobile ? '300px' : '450px',\n                overflowY: 'auto',\n                padding: isMobile ? '5px' : '10px',\n              }}\n            >\n              {/* Your chat messages - keep existing code */}\n              {answers.map((answer, idx) => (\n                <div\n                  key={idx}\n                  className=\"chat-message-container\"\n                  style={{\n                    marginBottom: '5px',\n                    padding: isMobile ? '3px' : '5px',\n                    borderRadius: '4px',\n                    border: '1px solid #ccc',\n                    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n                  }}\n                >\n                  {/* Keep your existing chat message content */}\n                  <div\n                    className=\"chat-user\"\n                    style={{\n                      textAlign: 'right',\n                      marginLeft: 'auto',\n                      padding: isMobile ? '3px' : '5px',\n                      fontSize: isMobile ? '12px' : '14px'\n                    }}\n                  >\n                    {client_user}: <span>{answer.user}</span>\n                  </div>\n                  <div\n                    className=\"chat-response-container\"\n                    style={{\n                      display: 'flex',\n                      alignItems: 'flex-start',\n                      backgroundColor: background_color_chat,\n                      padding: isMobile ? '5px' : '10px',\n                    }}\n                  >\n                    {imageSrc && (\n                      <div className=\"chat-image\" style={{ marginRight: isMobile ? '5px' : '10px' }}>\n                        <img src={imageSrc} alt=\"response\" style={{ width: isMobile ? '30px' : '50px' }} />\n                      </div>\n                    )}\n                    <div\n                      className=\"chat-response-text\"\n                      style={{ \n                        flex: 1, \n                        wordBreak: 'break-word',\n                        fontSize: isMobile ? '12px' : '14px'\n                      }}\n                    >\n                      {answer.resp\n                        ? <span dangerouslySetInnerHTML={{ __html: answer.resp }} />\n                        : <span className=\"spinner\" />}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Input text section - keep existing but adjust for mobile */}\n      {input_text && (\n        <>\n          <hr style={{ margin: '3px 0' }} />\n          <div className=\"form-group\" style={{ display: \"flex\", alignItems: \"center\" }}>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              placeholder={placeholder}\n              value={textString}\n              onChange={handleInputText}\n              onKeyDown={handleOnKeyDown}\n              style={{ \n                flex: 1,\n                fontSize: isMobile ? '14px' : '16px',\n                padding: isMobile ? '6px' : '8px'\n              }}\n            />\n          </div>\n          <hr style={{ margin: '3px 0' }} />\n        </>\n      )}\n\n          {editingDataframe &&\n            Array.isArray(editingDataframe) &&\n            editingDataframe.length > 0 &&\n            editedDataframe &&\n            Array.isArray(editedDataframe) &&\n            editedDataframe.length > 0 && (\n              <div\n                style={{\n            padding: 20,\n            border: \"2px solid #b3c6e0\",\n            borderRadius: \"12px\",\n            background: \"rgba(240, 248, 255, 0.7)\",\n            boxShadow: \"0 2px 12px rgba(100, 150, 200, 0.08)\",\n            marginBottom: 16,\n            marginTop: 8,\n                }}\n              >\n                <h3 style={{ marginTop: 0, color: \"#2a3b5d\" }}>Edit Dataframe</h3>\n                <table\n            style={{\n              borderCollapse: \"collapse\",\n              width: \"100%\",\n              background: \"rgba(255,255,255,0.5)\",\n              borderRadius: \"8px\",\n              overflow: \"hidden\",\n              boxShadow: \"0 1px 4px rgba(100,150,200,0.06)\",\n            }}\n                >\n            <thead>\n              <tr>\n                {Object.keys(editingDataframe[0]).map((col) => (\n                  <th\n              key={col}\n              style={{\n                border: \"1px solid #c8d6e5\",\n                padding: 6,\n                background: \"rgba(200,220,255,0.35)\",\n                color: \"#2a3b5d\",\n                fontWeight: 600,\n              }}\n                  >\n              {col}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {editedDataframe.map((row, rowIdx) => (\n                <tr key={rowIdx}>\n                  {Object.keys(row).map((col) => (\n              <td\n                key={col}\n                style={{\n                  border: \"1px solid #c8d6e5\",\n                  padding: 4,\n                  background: \"rgba(255,255,255,0.3)\",\n                }}\n              >\n                <input\n                  value={row[col]}\n                  onChange={e => {\n                    const newDF = editedDataframe.map((r, i) =>\n                i === rowIdx ? { ...r, [col]: e.target.value } : r\n                    );\n                    setEditedDataframe(newDF);\n                  }}\n                  style={{\n                    width: \"100%\",\n                    background: \"rgba(255,255,255,0.5)\",\n                    border: \"1px solid #b3c6e0\",\n                    borderRadius: \"4px\",\n                    padding: \"2px 4px\",\n                    color: \"#2a3b5d\",\n                  }}\n                />\n              </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n                </table>\n                <div style={{ marginTop: 12 }}>\n            <button\n              style={{\n                marginRight: 8,\n                background: \"rgba(42, 59, 93, 0.8)\",\n                color: \"#fff\",\n                border: \"none\",\n                borderRadius: \"4px\",\n                padding: \"6px 14px\",\n                cursor: \"pointer\",\n              }}\n              onClick={async () => {\n                // Send editedDataframe to API\n  await myFunc(textString, { api_body: { dataframe: editedDataframe } }, \"dataframe_edit\");\n  setEditingDataframe(null);\n  setEditedDataframe(null);\n              }}\n            >\n              Save\n            </button>\n            <button\n              style={{\n                background: \"rgba(200,220,255,0.5)\",\n                color: \"#2a3b5d\",\n                border: \"none\",\n                borderRadius: \"4px\",\n                padding: \"6px 14px\",\n                cursor: \"pointer\",\n              }}\n              onClick={() => {\n                setEditingDataframe(null);\n                setEditedDataframe(null);\n              }}\n            >\n              Cancel\n            </button>\n                </div>\n              </div>\n          )}\n\n<div className=\"form-group\" style={{ \n        display: \"flex\", \n        alignItems: \"left\", \n        flexWrap: \"wrap\",\n        gap: isMobile ? \"4px\" : \"8px\"\n      }}>\n        <button\n          onClick={click_listenButton}\n          style={{\n            marginLeft: isMobile ? 4 : 8,\n            background: listenButton ? 'rgb(26, 182, 28)' : \"rgb(19, 123, 193)\",\n            border: 'none',\n            borderRadius: '50%',\n            width: isMobile ? 32 : 36,\n            height: isMobile ? 32 : 36,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            cursor: 'pointer',\n            color: 'white',\n            fontSize: isMobile ? 16 : 20,\n            boxShadow: '0 1px 4px rgba(0,0,0,0.08)',\n            transition: 'background 0.2s',\n          }}\n          title=\"Click and Ask\"\n        >\n          <span role=\"img\" aria-label=\"microphone\">🎤</span>\n        </button>\n      \n<button\n  onClick={convo_mode}\n  onMouseEnter={() => setShowTooltip_conv(true)}\n  onMouseLeave={() => setShowTooltip_conv(false)}\n  style={{\n    marginLeft: 8,\n    background: convo_button ? 'rgb(26, 182, 28)' : \"rgb(19, 123, 193)\",\n    border: 'none',\n    borderRadius: '50%',\n    width: 36,\n    height: 36,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    cursor: 'pointer',\n    color: 'white',\n    fontSize: 20,\n    boxShadow: '0 1px 4px rgba(0,0,0,0.08)',\n    transition: 'background 0.2s',\n    position: 'relative',\n  }}\n>\n<span role=\"img\" aria-label={convo_button ? \"paper\" : \"x\"}>\n  {convo_button ? \"🎧\" : \"🔇\"}\n</span>  {showTooltip_conv && (\n    <span\n      style={{\n        position: \"absolute\",\n        top: \"-38px\",\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n        background: \"#222\",\n        color: \"#fff\",\n        padding: \"4px 10px\",\n        borderRadius: \"4px\",\n        fontSize: \"13px\",\n        whiteSpace: \"nowrap\",\n        zIndex: 1000,\n        pointerEvents: \"none\",\n      }}\n    >\n      {convo_button ? \"Listening On\" : \"Listening OFF\"}\n    </span>\n  )}\n</button>\n\n\n<button\n  onClick={listenSession}\n  onMouseEnter={() => setShowTooltip(true)}\n  onMouseLeave={() => setShowTooltip(false)}\n  style={{\n    marginLeft: 8,\n    background: session_listen ? 'rgb(26, 182, 28)' : \"rgb(19, 123, 193)\",\n    border: 'none',\n    borderRadius: '50%',\n    width: 36,\n    height: 36,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    cursor: 'pointer',\n    color: 'white',\n    fontSize: 20,\n    boxShadow: '0 1px 4px rgba(0,0,0,0.08)',\n    transition: 'background 0.2s',\n    position: 'relative',\n  }}\n>\n<span role=\"img\" aria-label={session_listen ? \"paper\" : \"x\"}>\n  {session_listen ? \"📄\" : \"📄\"}\n</span>  {showTooltip && (\n<span\n  style={{\n    position: \"absolute\",\n    top: \"-38px\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    background: 'rgb(235, 243, 244)',\n    color: 'rgb(45, 68, 72)',\n    padding: \"4px 10px\",\n    borderRadius: \"4px\",\n    fontSize: \"13px\",\n    whiteSpace: \"normal\",      // allow text to wrap\n    maxWidth: \"220px\",         // prevent it from being too wide\n    textAlign: \"center\",       // center the text\n    zIndex: 1000,\n    pointerEvents: \"none\",\n  }}\n>\n  {session_listen\n    ? \"ON\"\n    : `Enable's \"hey ${splitImage}\" commands & holds Transcript\"`}\n</span>\n  )}\n</button>\n\n</div>\n\n\n              {/* Agent Actions Horizontal Button-Style Multi-Select */}\n                {Array.isArray(agent_actions) && agent_actions.length > 0 && (\n                  <div\n                    style={{\n                      display: 'flex',\n                      flexWrap: 'wrap',\n                      justifyContent: 'right',\n                      marginTop: '8px',\n                      gap: '6px',\n                      alignItems: 'right',\n                    }}\n                  >\n                    <span style={{ fontWeight: 600, marginRight: 12, minWidth: 90, textAlign: 'left' }}>\n                      Agent Actions:\n                    </span>\n                    {agent_actions.map((action, idx) => {\n              const selected = selectedActions.includes(action);\n              return (\n                <button\n                  key={idx}\n                  onClick={() => {\n                    if (selected) {\n                      setSelectedActions(selectedActions.filter((a) => a !== action));\n                    } else {\n                      setSelectedActions([...selectedActions, action]);\n                    }\n                  }}\n                  style={{\n                    fontSize: '12px',\n                    padding: '5px 10px',\n                    backgroundColor: selected ? 'rgb(59, 159, 72)' : 'rgb(200, 233, 238)',\n                    color: selected ? 'white' : 'black',\n                    border: '1px solidrgb(239, 242, 244)',\n                    borderRadius: '4px',\n                    cursor: 'pointer',\n                  }}\n                >\n                  {action}\n                </button>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Dictaphone component */}\n        <div className=\"p-2\" style={{ marginBottom: '15px' }}>\n          <Dictaphone\n            commands={commands}\n            myFunc={myFunc}\n            listenAfterReply={listenAfterReply}\n            no_response_time={no_response_time}\n            apiInProgress={apiInProgress}\n            listenButton={listenButton}\n            session_listen={session_listen}\n            listening={listening}\n            initialFinalTranscript={kwargs.initialFinalTranscript || \"\"}\n            splitImage={splitImage}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CustomVoiceGPT;\n\n\n  // useEffect(() => {\n  //   const loadModels = async () => {\n  //     const MODEL_URL = process.env.PUBLIC_URL + \"/models\";\n\n  //     Promise.all([\n  //       faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),\n  //       faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),\n  //       faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL),\n  //       faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL),\n  //       faceapi.nets.ageGenderNet.loadFromUri(MODEL_URL),\n  //     ]).then(() => setModelsLoaded(true));\n  //   };\n  //   loadModels();\n  //   const interval = setInterval(() => {\n  //     // console.log(\"faceData.current :>> \", faceData.current);\n  //   }, 3000);\n  //   return () => clearInterval(interval);\n  // }, []);\n\n    // const startVideo = () => {\n  //   setCaptureVideo(true);\n  //   navigator.mediaDevices\n  //     .getUserMedia({ video: { width: 300 } })\n  //     .then((stream) => {\n  //       let video = videoRef.current;\n  //       video.srcObject = stream;\n  //       video.play();\n  //     })\n  //     .catch((err) => {\n  //       console.error(\"error:\", err);\n  //     });\n  // };\n\n  // const handleVideoOnPlay = () => {\n  //   setInterval(async () => {\n  //     if (canvasRef && canvasRef.current) {\n  //       canvasRef.current.innerHTML = faceapi.createCanvasFromMedia(\n  //         videoRef.current\n  //       );\n  //       const displaySize = {\n  //         width: videoWidth,\n  //         height: videoHeight,\n  //       };\n\n  //       faceapi.matchDimensions(canvasRef.current, displaySize);\n\n  //       const detections = await faceapi\n  //         .detectAllFaces(\n  //           videoRef.current,\n  //           new faceapi.TinyFaceDetectorOptions()\n  //         )\n  //         .withFaceLandmarks()\n  //         .withFaceExpressions();\n\n  //       const resizedDetections = faceapi.resizeResults(detections, displaySize);\n\n  //       if (resizedDetections.length > 0) {\n  //         faceData.current = resizedDetections;\n  //         if (!faceTriggered.current && face_recon) {\n  //           myFunc(\"\", { api_body: { keyword: \"\" } }, 2);\n  //           faceTriggered.current = true;\n  //         }\n  //       } else {\n  //         faceTimer && clearTimeout(faceTimer);\n  //         setTimeout(() => {\n  //           faceData.current = [];\n  //         }, 1000);\n  //       }\n\n  //       if (resizedDetections.length > 0 && !firstFace) {\n  //         firstFace = true;\n  //         if (kwargs.hello_audio) {\n  //           const audio = new Audio(kwargs.hello_audio);\n  //           audio.play();\n  //         }\n  //       }\n\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         canvasRef.current\n  //           .getContext(\"2d\")\n  //           .clearRect(0, 0, videoWidth, videoHeight);\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         faceapi.draw.drawDetections(canvasRef.current, resizedDetections);\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         faceapi.draw.drawFaceLandmarks(canvasRef.current, resizedDetections);\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         faceapi.draw.drawFaceExpressions(\n  //           canvasRef.current,\n  //           resizedDetections\n  //         );\n  //     }\n  //   }, 300);\n  // };\n\n  // const closeWebcam = () => {\n  //   videoRef.current.pause();\n  //   videoRef.current.srcObject.getTracks()[0].stop();\n  //   setCaptureVideo(false);\n  // };","import React, { useEffect, useState } from \"react\"\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport VoiceGPT from \"./VoiceGPT.jsx\"\n\nconst Main = (props: ComponentProps) => {\n  const { api, kwargs } = props.args\n  useEffect(() => Streamlit.setFrameHeight())\n  return (\n    <>\n      <VoiceGPT api={api} kwargs={kwargs} />\n    </>\n  )\n}\n\nexport default withStreamlitConnection(Main)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Main from \"./Main\"\n// Lots of import to define a Styletron engine and load the light theme of baseui\nimport { Client as Styletron } from \"styletron-engine-atomic\"\nimport { Provider as StyletronProvider } from \"styletron-react\"\nimport { ThemeProvider, LightTheme } from \"baseui\"\n\nconst engine = new Styletron()\n\n// Wrap your CustomSlider with the baseui them\nReactDOM.render(\n  <React.StrictMode>\n    <StyletronProvider value={engine}>\n      <ThemeProvider theme={LightTheme}>\n        <Main />\n      </ThemeProvider>\n    </StyletronProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}